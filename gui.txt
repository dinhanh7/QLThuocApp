//This is code of: GuestFeedbackForm.java
package gui;

import controller.PhanHoiController;
import dao.KhachHangDAO;
import dao.ChiTietHoaDonDAO;
import entities.KhachHang;
import entities.PhanHoi;
import utils.MessageDialog;

import javax.swing.*;
import java.awt.*;
import java.awt.event.ActionEvent;
import java.awt.event.ActionListener;

/**
 * GuestFeedbackForm.java
 *
 * Cho phép khách (chưa đăng nhập) nhập:
 *  - Số điện thoại (tự tìm idKH)
 *  - IDHD (tự tìm idThuoc đầu tiên trong ChiTietHoaDon)
 *  - Nội dung phản hồi
 *  - Đánh giá
 *
 * Khi bấm "Gửi", ghi vào bảng PhanHoi:
 *  - idPH tự sinh ("PH" + timestamp)
 *  - idKH tìm theo sdt
 *  - idHD do user nhập
 *  - idThuoc do lookup ChiTietHoaDon
 *  - noiDung, danhGia do user nhập
 *  - thoiGian = now
 *
 */
public class GuestFeedbackForm extends JFrame {

    private JPanel contentPane;
    private JTextField txtSDT, txtIdHD, txtNoiDung, txtDanhGia;
    private JButton btnSubmit, btnCancel;

    private PhanHoiController phanHoiController;

    public GuestFeedbackForm() {
        setTitle("Chế độ khách - Gửi phản hồi");
        setDefaultCloseOperation(JFrame.EXIT_ON_CLOSE);
        setSize(450, 300);
        setLocationRelativeTo(null);
        initComponents();
        phanHoiController = new PhanHoiController();
    }

    private void initComponents() {
        contentPane = new JPanel();
        contentPane.setLayout(null);
        setContentPane(contentPane);

        JLabel lblTitle = new JLabel("Gửi phản hồi (Chế độ khách)");
        lblTitle.setFont(new Font("Tahoma", Font.BOLD, 16));
        lblTitle.setBounds(100, 10, 250, 30);
        contentPane.add(lblTitle);

        // Số điện thoại
        JLabel lblSDT = new JLabel("Số điện thoại:");
        lblSDT.setBounds(20, 60, 100, 25);
        contentPane.add(lblSDT);

        txtSDT = new JTextField();
        txtSDT.setBounds(130, 60, 200, 25);
        contentPane.add(txtSDT);

        // IDHD
        JLabel lblIdHD = new JLabel("ID Hóa đơn:");
        lblIdHD.setBounds(20, 100, 100, 25);
        contentPane.add(lblIdHD);

        txtIdHD = new JTextField();
        txtIdHD.setBounds(130, 100, 200, 25);
        contentPane.add(txtIdHD);

        // Nội dung phản hồi
        JLabel lblNoiDung = new JLabel("Nội dung:");
        lblNoiDung.setBounds(20, 140, 100, 25);
        contentPane.add(lblNoiDung);

        txtNoiDung = new JTextField();
        txtNoiDung.setBounds(130, 140, 260, 25);
        contentPane.add(txtNoiDung);

        // Đánh giá
        JLabel lblDanhGia = new JLabel("Đánh giá (1-5):");
        lblDanhGia.setBounds(20, 180, 100, 25);
        contentPane.add(lblDanhGia);

        txtDanhGia = new JTextField();
        txtDanhGia.setBounds(130, 180, 50, 25);
        contentPane.add(txtDanhGia);

        // Nút Gửi
        btnSubmit = new JButton("Gửi");
        btnSubmit.setBounds(100, 230, 80, 30);
        contentPane.add(btnSubmit);
        btnSubmit.addActionListener(new ActionListener() {
            @Override
            public void actionPerformed(ActionEvent e) {
                submitFeedback();
            }
        });

        // Nút Hủy
        btnCancel = new JButton("Hủy");
        btnCancel.setBounds(220, 230, 80, 30);
        contentPane.add(btnCancel);
        btnCancel.addActionListener(e -> {
            // Trở về LoginForm
            LoginForm login = new LoginForm();
            login.setVisible(true);
            this.dispose();
        });
    }

    /**
     * Xử lý khi nhấn "Gửi" trong chế độ khách.
     * 1. Lấy sdt --> tìm idKH (KhachHangDAO#getBySDT)
     * 2. Lấy idHD do người dùng nhập --> tìm idThuoc (ChiTietHoaDonDAO#getFirstIdThuocByHD)
     * 3. idPH = "PH" + System.currentTimeMillis()
     * 4. thoiGian = now
     * 5. Gọi PhanHoiController.addPhanHoiGuest(...)
     */
    private void submitFeedback() {
        String sdt = txtSDT.getText().trim();
        String idHD = txtIdHD.getText().trim();
        String noiDung = txtNoiDung.getText().trim();
        String strDanhGia = txtDanhGia.getText().trim();

        if (sdt.isEmpty() || idHD.isEmpty() || noiDung.isEmpty() || strDanhGia.isEmpty()) {
            MessageDialog.showWarning(this, "Vui lòng điền hết các trường", "Cảnh báo");
            return;
        }

        int danhGia;
        try {
            danhGia = Integer.parseInt(strDanhGia);
            if (danhGia < 1 || danhGia > 5) {
                MessageDialog.showWarning(this, "Đánh giá phải từ 1 đến 5", "Cảnh báo");
                return;
            }
        } catch (NumberFormatException ex) {
            MessageDialog.showWarning(this, "Đánh giá phải là số nguyên (1-5)", "Cảnh báo");
            return;
        }

        // Gọi controller để tự động xử lý
        boolean success = phanHoiController.addPhanHoiGuest(sdt, idHD, noiDung, danhGia);
        if (success) {
            MessageDialog.showInfo(this, "Gửi phản hồi thành công. Cảm ơn bạn!", "Thông báo");
            // Sau khi gửi xong, trở về LoginForm
            LoginForm login = new LoginForm();
            login.setVisible(true);
            this.dispose();
        } else {
            MessageDialog.showError(this, "Gửi phản hồi thất bại. Vui lòng kiểm tra lại thông tin.", "Lỗi");
        }
    }
}

//This is code of: HoaDonPanel.java
package gui;

import controller.HoaDonController;
import entities.HoaDon;
import utils.DateHelper;
import utils.MessageDialog;
import utils.Validator;

import javax.swing.*;
import javax.swing.table.DefaultTableModel;
import java.awt.event.MouseAdapter;
import java.awt.event.MouseEvent;
import java.util.List;

public class HoaDonPanel extends JPanel {

    private JTable tblHoaDon;
    private DefaultTableModel tblModel;

    private JPanel inputPanel;
    private JTextField txtIdHD, txtThoiGian, txtIdNV, txtIdKH, txtTongTien;
    private JTextField txtPhuongThucThanhToan, txtTrangThaiDonHang;
    private JButton btnSave, btnCancel;

    private JTextField txtSearchIdHD, txtSearchIdNV, txtSearchIdKH;
    private JButton btnSearch;

    private JButton btnAdd, btnEdit, btnDelete, btnViewDetail, btnRefresh;

    private HoaDonController controller;
    private String currentMode = "NONE"; // "NONE" | "ADDING" | "EDITING"

    public HoaDonPanel() {
        controller = new HoaDonController();
        initComponents();
        initSearchPanel();
        initInputPanel(false);
        loadDataToTable();
    }

    private void initComponents() {
        setLayout(null);

        btnAdd = new JButton("Thêm");
        btnAdd.setBounds(10, 10, 80, 30);
        add(btnAdd);
        btnAdd.addActionListener(e -> onAdd());

        btnEdit = new JButton("Sửa");
        btnEdit.setBounds(100, 10, 80, 30);
        add(btnEdit);
        btnEdit.addActionListener(e -> onEdit());

        btnDelete = new JButton("Xóa");
        btnDelete.setBounds(190, 10, 80, 30);
        add(btnDelete);
        btnDelete.addActionListener(e -> onDelete());

        btnViewDetail = new JButton("Xem chi tiết");
        btnViewDetail.setBounds(280, 10, 110, 30);
        add(btnViewDetail);
        btnViewDetail.addActionListener(e -> onViewDetail());

        btnRefresh = new JButton("Làm mới");
        btnRefresh.setBounds(400, 10, 100, 30);
        add(btnRefresh);
        btnRefresh.addActionListener(e -> onRefresh());

        tblModel = new DefaultTableModel();
        tblModel.setColumnIdentifiers(new String[]{
                "IDHD", "Thời gian", "IDNV", "IDKH", "Tổng tiền", "PT Thanh toán", "Trạng thái"
        });
        tblHoaDon = new JTable(tblModel);
        JScrollPane scrollPane = new JScrollPane(tblHoaDon);
        scrollPane.setBounds(10, 200, 860, 310);
        add(scrollPane);

        tblHoaDon.addMouseListener(new MouseAdapter() {
            @Override
            public void mouseClicked(MouseEvent e) {
                int row = tblHoaDon.getSelectedRow();
                if (row >= 0 && currentMode.equals("NONE")) {
                    populateInputFromTable(row);
                }
            }
        });
    }

    private void initSearchPanel() {
        JPanel searchPanel = new JPanel(null);
        searchPanel.setBounds(10, 50, 860, 30);
        add(searchPanel);

        JLabel lblSearchIdHD = new JLabel("IDHD:");
        lblSearchIdHD.setBounds(0, 5, 40, 20);
        searchPanel.add(lblSearchIdHD);

        txtSearchIdHD = new JTextField();
        txtSearchIdHD.setBounds(45, 3, 120, 25);
        searchPanel.add(txtSearchIdHD);

        JLabel lblSearchIdNV = new JLabel("IDNV:");
        lblSearchIdNV.setBounds(180, 5, 40, 20);
        searchPanel.add(lblSearchIdNV);

        txtSearchIdNV = new JTextField();
        txtSearchIdNV.setBounds(225, 3, 120, 25);
        searchPanel.add(txtSearchIdNV);

        JLabel lblSearchIdKH = new JLabel("IDKH:");
        lblSearchIdKH.setBounds(360, 5, 40, 20);
        searchPanel.add(lblSearchIdKH);

        txtSearchIdKH = new JTextField();
        txtSearchIdKH.setBounds(405, 3, 120, 25);
        searchPanel.add(txtSearchIdKH);

        btnSearch = new JButton("Tìm kiếm");
        btnSearch.setBounds(550, 3, 100, 25);
        searchPanel.add(btnSearch);
        btnSearch.addActionListener(e -> onSearch());
    }

    private void initInputPanel(boolean visible) {
        inputPanel = new JPanel(null);
        inputPanel.setBounds(10, 90, 860, 100);
        add(inputPanel);

        JLabel lblIdHD = new JLabel("IDHD:");
        lblIdHD.setBounds(10, 10, 40, 25);
        inputPanel.add(lblIdHD);
        txtIdHD = new JTextField();
        txtIdHD.setBounds(60, 10, 100, 25);
        inputPanel.add(txtIdHD);

        JLabel lblThoiGian = new JLabel("Thời gian:");
        lblThoiGian.setBounds(180, 10, 70, 25);
        inputPanel.add(lblThoiGian);
        txtThoiGian = new JTextField();
        txtThoiGian.setBounds(262, 10, 150, 25);
        inputPanel.add(txtThoiGian);

        JLabel lblIdNV = new JLabel("IDNV:");
        lblIdNV.setBounds(420, 10, 40, 25);
        inputPanel.add(lblIdNV);
        txtIdNV = new JTextField();
        txtIdNV.setBounds(475, 10, 100, 25);
        inputPanel.add(txtIdNV);

        JLabel lblIdKH = new JLabel("IDKH:");
        lblIdKH.setBounds(626, 10, 40, 25);
        inputPanel.add(lblIdKH);
        txtIdKH = new JTextField();
        txtIdKH.setBounds(663, 10, 100, 25);
        inputPanel.add(txtIdKH);

        JLabel lblTongTien = new JLabel("Tổng tiền:");
        lblTongTien.setBounds(10, 40, 70, 25);
        inputPanel.add(lblTongTien);
        txtTongTien = new JTextField();
        txtTongTien.setBounds(60, 40, 100, 25);
        inputPanel.add(txtTongTien);

        JLabel lblPTTT = new JLabel("PT Thanh toán:");
        lblPTTT.setBounds(180, 40, 100, 25);
        inputPanel.add(lblPTTT);
        txtPhuongThucThanhToan = new JTextField();
        txtPhuongThucThanhToan.setBounds(262, 40, 150, 25);
        inputPanel.add(txtPhuongThucThanhToan);

        JLabel lblTrangThai = new JLabel("Trạng thái:");
        lblTrangThai.setBounds(420, 40, 70, 25);
        inputPanel.add(lblTrangThai);
        txtTrangThaiDonHang = new JTextField();
        txtTrangThaiDonHang.setBounds(475, 40, 100, 25);
        inputPanel.add(txtTrangThaiDonHang);

        btnSave = new JButton("Lưu");
        btnSave.setBounds(800, 10, 60, 30);
        inputPanel.add(btnSave);
        btnSave.addActionListener(e -> onSave());

        btnCancel = new JButton("Hủy");
        btnCancel.setBounds(800, 50, 60, 30);
        inputPanel.add(btnCancel);
        btnCancel.addActionListener(e -> onCancel());

        inputPanel.setVisible(visible);
    }

    private void loadDataToTable() {
        tblModel.setRowCount(0);
        List<HoaDon> list = controller.getAllHoaDon();
        for (HoaDon hd : list) {
            tblModel.addRow(new Object[]{
                    hd.getIdHD(),
                    DateHelper.toString(hd.getThoiGian(), "dd/MM/yyyy HH:mm:ss"),
                    hd.getIdNV(),
                    hd.getIdKH(),
                    String.format("%.1f", hd.getTongTien()),
                    hd.getPhuongThucThanhToan() != null ? hd.getPhuongThucThanhToan() : "",
                    hd.getTrangThaiDonHang()
            });
        }
    }

    private void onSearch() {
        String idHD = txtSearchIdHD.getText().trim();
        String idNV = txtSearchIdNV.getText().trim();
        String idKH = txtSearchIdKH.getText().trim();

        List<HoaDon> results = controller.searchHoaDon(idHD, idNV, idKH);

        tblModel.setRowCount(0);
        for (HoaDon hd : results) {
            tblModel.addRow(new Object[]{
                    hd.getIdHD(),
                    DateHelper.toString(hd.getThoiGian(), "dd/MM/yyyy HH:mm:ss"),
                    hd.getIdNV(),
                    hd.getIdKH(),
                    String.format("%.1f", hd.getTongTien()),
                    hd.getPhuongThucThanhToan() != null ? hd.getPhuongThucThanhToan() : "",
                    hd.getTrangThaiDonHang()
            });
        }

        if (!results.isEmpty()) {
            SwingUtilities.invokeLater(() -> {
                tblHoaDon.setRowSelectionInterval(0, 0);
                tblHoaDon.scrollRectToVisible(tblHoaDon.getCellRect(0, 0, true));
            });
        }
    }

    private void populateInputFromTable(int row) {
        txtIdHD.setText((String) tblModel.getValueAt(row, 0));
        txtThoiGian.setText((String) tblModel.getValueAt(row, 1));
        txtIdNV.setText((String) tblModel.getValueAt(row, 2));
        txtIdKH.setText((String) tblModel.getValueAt(row, 3));
        txtTongTien.setText((String) tblModel.getValueAt(row, 4));
        txtPhuongThucThanhToan.setText((String) tblModel.getValueAt(row, 5));
        txtTrangThaiDonHang.setText((String) tblModel.getValueAt(row, 6));
    }

    private void hideInputPanel() {
        txtIdHD.setText("");
        txtThoiGian.setText("");
        txtIdNV.setText("");
        txtIdKH.setText("");
        txtTongTien.setText("");
        txtPhuongThucThanhToan.setText("");
        txtTrangThaiDonHang.setText("");

        inputPanel.setVisible(false);
        currentMode = "NONE";

        btnAdd.setEnabled(true);
        btnEdit.setEnabled(true);
        btnDelete.setEnabled(true);
        btnViewDetail.setEnabled(true);
        btnRefresh.setEnabled(true);
        tblHoaDon.setEnabled(true);
        btnSearch.setEnabled(true);
        txtSearchIdHD.setEnabled(true);
        txtSearchIdNV.setEnabled(true);
        txtSearchIdKH.setEnabled(true);
    }

    // ======================= XỬ LÝ CHÍNH ===========================

    private void onAdd() {
        currentMode = "ADDING";
        inputPanel.setVisible(true);

        txtIdHD.setText("");
        txtThoiGian.setText("");
        txtIdNV.setText("");
        txtIdKH.setText("");
        txtTongTien.setText("");
        txtPhuongThucThanhToan.setText("");
        txtTrangThaiDonHang.setText("");

        txtIdHD.setEditable(true);

        btnAdd.setEnabled(false);
        btnEdit.setEnabled(false);
        btnDelete.setEnabled(false);
        btnViewDetail.setEnabled(false);
        btnRefresh.setEnabled(false);
        tblHoaDon.setEnabled(false);
        btnSearch.setEnabled(false);
        txtSearchIdHD.setEnabled(false);
        txtSearchIdNV.setEnabled(false);
        txtSearchIdKH.setEnabled(false);
    }

    private void onEdit() {
        int row = tblHoaDon.getSelectedRow();
        if (row < 0) {
            MessageDialog.showWarning(this, "Vui lòng chọn hóa đơn cần sửa!", "Cảnh báo");
            return;
        }
        currentMode = "EDITING";
        inputPanel.setVisible(true);

        populateInputFromTable(row);
        txtIdHD.setEditable(false);

        btnAdd.setEnabled(false);
        btnEdit.setEnabled(false);
        btnDelete.setEnabled(false);
        btnViewDetail.setEnabled(false);
        btnRefresh.setEnabled(false);
        tblHoaDon.setEnabled(false);
        btnSearch.setEnabled(false);
        txtSearchIdHD.setEnabled(false);
        txtSearchIdNV.setEnabled(false);
        txtSearchIdKH.setEnabled(false);
    }

    private void onDelete() {
        int row = tblHoaDon.getSelectedRow();
        if (row < 0) {
            MessageDialog.showWarning(this, "Vui lòng chọn hóa đơn cần xóa!", "Cảnh báo");
            return;
        }
        String idHD = (String) tblModel.getValueAt(row, 0);
        boolean confirm = MessageDialog.showConfirm(this,
                "Bạn có chắc muốn xóa hóa đơn " + idHD + "?", "Xác nhận");
        if (confirm) {
            StringBuilder errorMsg = new StringBuilder();
            if (controller.deleteHoaDon(idHD, errorMsg)) {
                MessageDialog.showInfo(this, "Xóa thành công!", "Thông báo");
                loadDataToTable();
            } else {
                MessageDialog.showError(this, errorMsg.length() > 0 ? errorMsg.toString() : "Xóa thất bại!", "Lỗi");
            }
        }
    }

    private void onViewDetail() {
        int row = tblHoaDon.getSelectedRow();
        if (row < 0) {
            MessageDialog.showWarning(this, "Vui lòng chọn hóa đơn để xem chi tiết!", "Cảnh báo");
            return;
        }
        String idHD = (String) tblModel.getValueAt(row, 0);
        // Mở dialog chi tiết hóa đơn (bạn cần có ViewChiTietHDDialog, không nằm trong code này)
        // ViewChiTietHDDialog dialog = new ViewChiTietHDDialog(SwingUtilities.getWindowAncestor(this), idHD);
        // dialog.setVisible(true);
        MessageDialog.showInfo(this, "Chức năng xem chi tiết hóa đơn đang được phát triển!", "Thông báo");
    }

    private void onRefresh() {
        hideInputPanel();
        loadDataToTable();
    }

    private void onSave() {
        String idHD = txtIdHD.getText().trim();
        String thoiGianStr = txtThoiGian.getText().trim();
        String idNV = txtIdNV.getText().trim();
        String idKH = txtIdKH.getText().trim();
        String tongTienStr = txtTongTien.getText().trim();
        String phuongThuc = txtPhuongThucThanhToan.getText().trim();
        String trangThai = txtTrangThaiDonHang.getText().trim();

        if (idHD.isEmpty()) {
            MessageDialog.showWarning(this, "IDHD không được để trống!", "Cảnh báo");
            return;
        }
        if (!Validator.isDateTime(thoiGianStr, "dd/MM/yyyy HH:mm:ss")) {
            MessageDialog.showWarning(this, "Thời gian phải đúng định dạng dd/MM/yyyy HH:mm:ss!", "Cảnh báo");
            return;
        }
        if (idNV.isEmpty()) {
            MessageDialog.showWarning(this, "IDNV không được để trống!", "Cảnh báo");
            return;
        }
        if (idKH.isEmpty()) {
            MessageDialog.showWarning(this, "IDKH không được để trống!", "Cảnh báo");
            return;
        }
        if (!Validator.isDouble(tongTienStr)) {
            MessageDialog.showWarning(this, "Tổng tiền phải là số!", "Cảnh báo");
            return;
        }
        if (trangThai.isEmpty()) {
            MessageDialog.showWarning(this, "Trạng thái đơn hàng không được để trống!", "Cảnh báo");
            return;
        }

        HoaDon hd = new HoaDon();
        hd.setIdHD(idHD);
        hd.setThoiGian(DateHelper.toDateTime(thoiGianStr, "dd/MM/yyyy HH:mm:ss"));
        hd.setIdNV(idNV);
        hd.setIdKH(idKH);
        hd.setTongTien(Double.parseDouble(tongTienStr));
        hd.setPhuongThucThanhToan(phuongThuc.isEmpty() ? null : phuongThuc);
        hd.setTrangThaiDonHang(trangThai);

        boolean success;
        StringBuilder errorMsg = new StringBuilder();
        if (currentMode.equals("ADDING")) {
            success = controller.addHoaDon(hd, errorMsg);
            if (success) {
                MessageDialog.showInfo(this, "Thêm thành công!", "Thông báo");
            } else {
                MessageDialog.showError(this, errorMsg.length() > 0 ? errorMsg.toString() : "Thêm thất bại!", "Lỗi");
                return;
            }
        } else { // EDITING
            success = controller.updateHoaDon(hd, errorMsg);
            if (success) {
                MessageDialog.showInfo(this, "Cập nhật thành công!", "Thông báo");
            } else {
                MessageDialog.showError(this, errorMsg.length() > 0 ? errorMsg.toString() : "Cập nhật thất bại!", "Lỗi");
                return;
            }
        }

        hideInputPanel();
        loadDataToTable();
    }

    private void onCancel() {
        hideInputPanel();
    }
}

//This is code of: HopDongPanel.java
package gui;

import controller.HopDongController;
import entities.HopDong;
import utils.DateHelper;
import utils.MessageDialog;
import utils.Validator;

import javax.swing.*;
import javax.swing.table.DefaultTableModel;
import java.awt.event.MouseAdapter;
import java.awt.event.MouseEvent;
import java.util.List;
import java.awt.Dimension;

/**
 * HopDongPanel.java (đã sửa để hiển thị cột trangThai, và form Add/Edit có thêm ô nhập Trạng thái)
 *
 * Bố cục:
 *  - Dòng 1 (y = 10): 4 nút Thêm, Sửa, Xóa, Làm mới
 *  - Dòng 2 (y = 50): Panel tìm kiếm (IDHDong, IDNV, IDNCC, nút Tìm kiếm)
 *  - Dòng 3 (y = 90): inputPanel ẩn/hiện khi Add/Edit (có thêm ô txtTrangThai)
 *  - Dòng 4 (y = 200): JTable (cao = 310) hiển thị các cột: IDHDong, Ngày bắt đầu, Ngày kết thúc, Nội dung, IDNV, IDNCC, Trạng thái
 */
public class HopDongPanel extends JPanel {

    private JTable tblHopDong;
    private DefaultTableModel tblModel;

    // inputPanel (ẩn khi currentMode == "NONE")
    private JPanel inputPanel;
    private JTextField txtIdHDong, txtNgayBatDau, txtNgayKetThuc, txtNoiDung, txtIdNV, txtIdNCC, txtTrangThai;
    private JButton btnSave, btnCancel;

    // panel tìm kiếm
    private JTextField txtSearchIdHDong, txtSearchIdNV, txtSearchIdNCC;
    private JButton btnSearch;

    // 4 nút chức năng
    private JButton btnAdd, btnEdit, btnDelete, btnRefresh;

    private HopDongController controller;
    private String currentMode = "NONE"; // "NONE" | "ADDING" | "EDITING"

    public HopDongPanel() {
        controller = new HopDongController();
        initComponents();
        initSearchPanel();
        initInputPanel(false);
        loadDataToTable();
    }

    /**
     * Khởi tạo các thành phần chính:
     *  - Nút Thêm, Sửa, Xóa, Làm mới (y = 10)
     *  - JTable (y = 200, cao = 310) hiển thị 7 cột: IDHDong, Ngày bắt đầu, Ngày kết thúc, Nội dung, IDNV, IDNCC, Trạng thái
     */
    private void initComponents() {
    	setPreferredSize(new Dimension(1600, 1200));
        setLayout(null);

        // --- Nút chức năng (y = 10) --- //
        btnAdd = new JButton("Thêm");
        btnAdd.setBounds(10, 10, 80, 30);
        add(btnAdd);
        btnAdd.addActionListener(e -> onAdd());

        btnEdit = new JButton("Sửa");
        btnEdit.setBounds(100, 10, 80, 30);
        add(btnEdit);
        btnEdit.addActionListener(e -> onEdit());

        btnDelete = new JButton("Xóa");
        btnDelete.setBounds(190, 10, 80, 30);
        add(btnDelete);
        btnDelete.addActionListener(e -> onDelete());

        btnRefresh = new JButton("Làm mới");
        btnRefresh.setBounds(280, 10, 100, 30);
        add(btnRefresh);
        btnRefresh.addActionListener(e -> onRefresh());

        // --- Bảng dữ liệu (y = 200, cao = 310) --- //
        tblModel = new DefaultTableModel();
        tblModel.setColumnIdentifiers(new String[]{
            "IDHDong", "Ngày bắt đầu", "Ngày kết thúc", "Nội dung", "IDNV", "IDNCC", "Trạng thái"
        });
        tblHopDong = new JTable(tblModel);
        JScrollPane scrollPane = new JScrollPane(tblHopDong);
        scrollPane.setBounds(10, 200, 860, 310);
        add(scrollPane);

        tblHopDong.addMouseListener(new MouseAdapter() {
            @Override
            public void mouseClicked(MouseEvent e) {
                int row = tblHopDong.getSelectedRow();
                if (row >= 0 && currentMode.equals("NONE")) {
                    populateInputFromTable(row);
                }
            }
        });
    }

    /**
     * Khởi tạo panel tìm kiếm (y = 50, cao = 30):
     *  - txtSearchIdHDong, txtSearchIdNV, txtSearchIdNCC, btnSearch
     */
    private void initSearchPanel() {
        JPanel searchPanel = new JPanel(null);
        searchPanel.setBounds(10, 50, 860, 30);
        add(searchPanel);

        JLabel lblSearchIdHDong = new JLabel("IDHDong:");
        lblSearchIdHDong.setBounds(0, 5, 70, 20);
        searchPanel.add(lblSearchIdHDong);

        txtSearchIdHDong = new JTextField();
        txtSearchIdHDong.setBounds(75, 3, 120, 25);
        searchPanel.add(txtSearchIdHDong);

        JLabel lblSearchIdNV = new JLabel("IDNV:");
        lblSearchIdNV.setBounds(220, 5, 50, 20);
        searchPanel.add(lblSearchIdNV);

        txtSearchIdNV = new JTextField();
        txtSearchIdNV.setBounds(270, 3, 120, 25);
        searchPanel.add(txtSearchIdNV);

        JLabel lblSearchIdNCC = new JLabel("IDNCC:");
        lblSearchIdNCC.setBounds(420, 5, 50, 20);
        searchPanel.add(lblSearchIdNCC);

        txtSearchIdNCC = new JTextField();
        txtSearchIdNCC.setBounds(480, 3, 120, 25);
        searchPanel.add(txtSearchIdNCC);

        btnSearch = new JButton("Tìm kiếm");
        btnSearch.setBounds(630, 3, 100, 25);
        searchPanel.add(btnSearch);
        btnSearch.addActionListener(e -> onSearch());
    }

    /**
     * Khởi tạo inputPanel (y = 90, cao = 100), ẩn khi visible = false.
     * Gồm các ô: IDHDong, NgayBatDau, NgayKetThuc, NoiDung, IDNV, IDNCC, TrangThai, 
     * và hai nút Lưu, Hủy.
     */
    private void initInputPanel(boolean visible) {
        inputPanel = new JPanel(null);
        inputPanel.setBounds(10, 90, 860, 100);
        add(inputPanel);

        // IDHDong
        JLabel lblIdHDong = new JLabel("IDHDong:");
        lblIdHDong.setBounds(10, 10, 70, 25);
        inputPanel.add(lblIdHDong);
        txtIdHDong = new JTextField();
        txtIdHDong.setBounds(90, 10, 120, 25);
        inputPanel.add(txtIdHDong);

        // Ngày bắt đầu
        JLabel lblNgayBatDau = new JLabel("Ngày bắt đầu:");
        lblNgayBatDau.setBounds(230, 10, 90, 25);
        inputPanel.add(lblNgayBatDau);
        txtNgayBatDau = new JTextField();
        txtNgayBatDau.setBounds(317, 10, 120, 25);
        inputPanel.add(txtNgayBatDau);

        // Ngày kết thúc
        JLabel lblNgayKetThuc = new JLabel("Ngày kết thúc:");
        lblNgayKetThuc.setBounds(461, 10, 90, 25);
        inputPanel.add(lblNgayKetThuc);
        txtNgayKetThuc = new JTextField();
        txtNgayKetThuc.setBounds(559, 10, 120, 25);
        inputPanel.add(txtNgayKetThuc);

        // Nội dung
        JLabel lblNoiDung = new JLabel("Nội dung:");
        lblNoiDung.setBounds(10, 70, 70, 25);
        inputPanel.add(lblNoiDung);
        txtNoiDung = new JTextField();
        txtNoiDung.setBounds(90, 75, 400, 25);
        inputPanel.add(txtNoiDung);

        // IDNV
        JLabel lblIdNV = new JLabel("IDNV:");
        lblIdNV.setBounds(230, 40, 40, 25);
        inputPanel.add(lblIdNV);
        txtIdNV = new JTextField();
        txtIdNV.setBounds(317, 40, 120, 25);
        inputPanel.add(txtIdNV);

        // IDNCC
        JLabel lblIdNCC = new JLabel("IDNCC:");
        lblIdNCC.setBounds(461, 40, 50, 25);
        inputPanel.add(lblIdNCC);
        txtIdNCC = new JTextField();
        txtIdNCC.setBounds(559, 40, 120, 25);
        inputPanel.add(txtIdNCC);

        // Trạng thái
        JLabel lblTrangThai = new JLabel("Trạng thái:");
        lblTrangThai.setBounds(10, 45, 70, 25);
        inputPanel.add(lblTrangThai);
        txtTrangThai = new JTextField();
        txtTrangThai.setBounds(90, 45, 120, 25);
        inputPanel.add(txtTrangThai);

        // Nút Lưu
        btnSave = new JButton("Lưu");
        btnSave.setBounds(800, 10, 60, 30);
        inputPanel.add(btnSave);
        btnSave.addActionListener(e -> onSave());

        // Nút Hủy
        btnCancel = new JButton("Hủy");
        btnCancel.setBounds(800, 50, 60, 30);
        inputPanel.add(btnCancel);
        btnCancel.addActionListener(e -> onCancel());

        inputPanel.setVisible(visible);
    }

    /**
     * Load dữ liệu HopDong vào JTable, gồm 7 cột:
     *  IDHDong, Ngày bắt đầu, Ngày kết thúc, Nội dung, IDNV, IDNCC, Trạng thái.
     */
    private void loadDataToTable() {
        tblModel.setRowCount(0);
        List<HopDong> list = controller.getAllHopDong();
        for (HopDong hd : list) {
            tblModel.addRow(new Object[]{
                hd.getIdHDong(),
                DateHelper.toString(hd.getNgayBatDau(), "dd/MM/yyyy"),
                DateHelper.toString(hd.getNgayKetThuc(), "dd/MM/yyyy"),
                hd.getNoiDung() != null ? hd.getNoiDung() : "",
                hd.getIdNV() != null ? hd.getIdNV() : "",
                hd.getIdNCC() != null ? hd.getIdNCC() : "",
                hd.getTrangThai()
            });
        }
    }

    /**
     * Khi nhấn “Tìm kiếm”: lấy idHDong, idNV, idNCC, gọi controller.searchHopDong(...),
     * hiển thị kết quả lên table, chọn tự động dòng đầu tiên nếu có.
     */
    private void onSearch() {
        String idHDong = txtSearchIdHDong.getText().trim();
        String idNV = txtSearchIdNV.getText().trim();
        String idNCC = txtSearchIdNCC.getText().trim();

        List<HopDong> results = controller.searchHopDong(idHDong, idNV, idNCC);

        tblModel.setRowCount(0);
        for (HopDong hd : results) {
            tblModel.addRow(new Object[]{
                hd.getIdHDong(),
                DateHelper.toString(hd.getNgayBatDau(), "dd/MM/yyyy"),
                DateHelper.toString(hd.getNgayKetThuc(), "dd/MM/yyyy"),
                hd.getNoiDung() != null ? hd.getNoiDung() : "",
                hd.getIdNV() != null ? hd.getIdNV() : "",
                hd.getIdNCC() != null ? hd.getIdNCC() : "",
                hd.getTrangThai()
            });
        }

        if (!results.isEmpty()) {
            SwingUtilities.invokeLater(() -> {
                tblHopDong.setRowSelectionInterval(0, 0);
                tblHopDong.scrollRectToVisible(tblHopDong.getCellRect(0, 0, true));
            });
        }
    }

    /**
     * Điền dữ liệu từ bảng lên inputPanel (nếu currentMode == "NONE").
     */
    private void populateInputFromTable(int row) {
        txtIdHDong.setText((String) tblModel.getValueAt(row, 0));
        txtNgayBatDau.setText((String) tblModel.getValueAt(row, 1));
        txtNgayKetThuc.setText((String) tblModel.getValueAt(row, 2));
        txtNoiDung.setText((String) tblModel.getValueAt(row, 3));
        txtIdNV.setText((String) tblModel.getValueAt(row, 4));
        txtIdNCC.setText((String) tblModel.getValueAt(row, 5));
        txtTrangThai.setText((String) tblModel.getValueAt(row, 6));
    }

    /**
     * Ẩn inputPanel và reset các ô, đồng thời enable lại nút/tìm kiếm/bảng.
     */
    private void hideInputPanel() {
        txtIdHDong.setText("");
        txtNgayBatDau.setText("");
        txtNgayKetThuc.setText("");
        txtNoiDung.setText("");
        txtIdNV.setText("");
        txtIdNCC.setText("");
        txtTrangThai.setText("");

        inputPanel.setVisible(false);
        currentMode = "NONE";

        btnAdd.setEnabled(true);
        btnEdit.setEnabled(true);
        btnDelete.setEnabled(true);
        btnRefresh.setEnabled(true);
        tblHopDong.setEnabled(true);
        btnSearch.setEnabled(true);
        txtSearchIdHDong.setEnabled(true);
        txtSearchIdNV.setEnabled(true);
        txtSearchIdNCC.setEnabled(true);
    }

    /**
     * Khi bấm “Thêm”:
     *  - Hiện inputPanel (rỗng),
     *  - Disable các thành phần khác (nút, bảng, tìm kiếm),
     *  - currentMode = "ADDING".
     */
    private void onAdd() {
        currentMode = "ADDING";
        inputPanel.setVisible(true);

        txtIdHDong.setText("");
        txtNgayBatDau.setText("");
        txtNgayKetThuc.setText("");
        txtNoiDung.setText("");
        txtIdNV.setText("");
        txtIdNCC.setText("");
        txtTrangThai.setText("");

        txtIdHDong.setEditable(true);

        btnAdd.setEnabled(false);
        btnEdit.setEnabled(false);
        btnDelete.setEnabled(false);
        btnRefresh.setEnabled(false);
        tblHopDong.setEnabled(false);
        btnSearch.setEnabled(false);
        txtSearchIdHDong.setEnabled(false);
        txtSearchIdNV.setEnabled(false);
        txtSearchIdNCC.setEnabled(false);
    }

    /**
     * Khi bấm “Sửa”:
     *  - Phải có dòng được chọn,
     *  - Điền dữ liệu lên inputPanel,
     *  - Disable các thành phần khác,
     *  - currentMode = "EDITING".
     */
    private void onEdit() {
        int row = tblHopDong.getSelectedRow();
        if (row < 0) {
            MessageDialog.showWarning(this, "Vui lòng chọn hợp đồng cần sửa!", "Cảnh báo");
            return;
        }
        currentMode = "EDITING";
        inputPanel.setVisible(true);

        populateInputFromTable(row);

        txtIdHDong.setEditable(false);

        btnAdd.setEnabled(false);
        btnEdit.setEnabled(false);
        btnDelete.setEnabled(false);
        btnRefresh.setEnabled(false);
        tblHopDong.setEnabled(false);
        btnSearch.setEnabled(false);
        txtSearchIdHDong.setEnabled(false);
        txtSearchIdNV.setEnabled(false);
        txtSearchIdNCC.setEnabled(false);
    }

    /**
     * Khi bấm “Xóa”:
     *  - Phải có dòng được chọn,
     *  - Xác nhận trước khi xóa,
     *  - Gọi controller.deleteHopDong(idHDong), nếu thành công reload bảng.
     */
    private void onDelete() {
        int row = tblHopDong.getSelectedRow();
        if (row < 0) {
            MessageDialog.showWarning(this, "Vui lòng chọn hợp đồng cần xóa!", "Cảnh báo");
            return;
        }
        String idHDong = (String) tblModel.getValueAt(row, 0);
        boolean confirm = MessageDialog.showConfirm(this,
                "Bạn có chắc muốn xóa hợp đồng " + idHDong + "?", "Xác nhận");
        if (confirm) {
            if (controller.deleteHopDong(idHDong)) {
                MessageDialog.showInfo(this, "Xóa thành công!", "Thông báo");
                loadDataToTable();
            } else {
                MessageDialog.showError(this, "Xóa thất bại!", "Lỗi");
            }
        }
    }


    /**
     * Khi bấm “Làm mới”:
     *  - Ẩn inputPanel nếu đang hiển thị,
     *  - Reload lại dữ liệu bảng.
     */
    private void onRefresh() {
        hideInputPanel();
        loadDataToTable();
    }

    /**
     * Khi bấm “Lưu” trong inputPanel:
     *  - Validate dữ liệu: IDHDong, Ngày bắt đầu, Ngày kết thúc, Trạng thái không được để trống;
     *    Ngày phải đúng định dạng dd/MM/yyyy; Nếu nhập IDNV hoặc IDNCC, không bắt buộc nhưng nếu nhập
     *    thì phải đúng độ dài (tùy bạn kiểm tra).
     *  - Nếu currentMode == "ADDING": gọi controller.addHopDong(hd),
     *    nếu currentMode == "EDITING": gọi controller.updateHopDong(hd),
     *  - Ẩn inputPanel và reload bảng nếu thành công.
     */
    private void onSave() {
        String idHDong = txtIdHDong.getText().trim();
        String ngayBatDauStr = txtNgayBatDau.getText().trim();
        String ngayKetThucStr = txtNgayKetThuc.getText().trim();
        String noiDung = txtNoiDung.getText().trim();
        String idNV = txtIdNV.getText().trim();
        String idNCC = txtIdNCC.getText().trim();
        String trangThai = txtTrangThai.getText().trim();

        if (idHDong.isEmpty()) {
            MessageDialog.showWarning(this, "IDHDong không được để trống!", "Cảnh báo");
            return;
        }
        if (!Validator.isDate(ngayBatDauStr, "dd/MM/yyyy")) {
            MessageDialog.showWarning(this, "Ngày bắt đầu phải đúng định dạng dd/MM/yyyy!", "Cảnh báo");
            return;
        }
        if (!Validator.isDate(ngayKetThucStr, "dd/MM/yyyy")) {
            MessageDialog.showWarning(this, "Ngày kết thúc phải đúng định dạng dd/MM/yyyy!", "Cảnh báo");
            return;
        }
        if (trangThai.isEmpty()) {
            MessageDialog.showWarning(this, "Trạng thái không được để trống!", "Cảnh báo");
            return;
        }
        // idNV và idNCC có thể để trống, không kiểm tra thêm

        HopDong hd = new HopDong();
        hd.setIdHDong(idHDong);
        hd.setNgayBatDau(DateHelper.toDate(ngayBatDauStr, "dd/MM/yyyy"));
        hd.setNgayKetThuc(DateHelper.toDate(ngayKetThucStr, "dd/MM/yyyy"));
        hd.setNoiDung(noiDung.isEmpty() ? null : noiDung);
        hd.setIdNV(idNV.isEmpty() ? null : idNV);
        hd.setIdNCC(idNCC.isEmpty() ? null : idNCC);
        hd.setTrangThai(trangThai);

        boolean success;
        if (currentMode.equals("ADDING")) {
            success = controller.addHopDong(hd);
            if (success) {
                MessageDialog.showInfo(this, "Thêm hợp đồng thành công!", "Thông báo");
            } else {
                MessageDialog.showError(this, "Thêm hợp đồng thất bại! Kiểm tra IDHDong hoặc kết nối DB.", "Lỗi");
                return;
            }
        } else { // EDITING
            success = controller.updateHopDong(hd);
            if (success) {
                MessageDialog.showInfo(this, "Cập nhật hợp đồng thành công!", "Thông báo");
            } else {
                MessageDialog.showError(this, "Cập nhật hợp đồng thất bại! Kiểm tra lại dữ liệu.", "Lỗi");
                return;
            }
        }

        hideInputPanel();
        loadDataToTable();
    }

    /**
     * Khi bấm “Hủy” trong inputPanel:
     *  - Chỉ cần ẩn inputPanel, không thực hiện lưu.
     */
    private void onCancel() {
        hideInputPanel();
    }
}

//This is code of: KhachHangPanel.java
package gui;

import controller.KhachHangController;
import entities.KhachHang;
import utils.DateHelper;
import utils.MessageDialog;
import utils.Validator;

import javax.swing.*;
import javax.swing.table.DefaultTableModel;
import java.awt.*;
import java.awt.event.*;
import java.util.List;
import java.awt.Dimension;

/**
 * KhachHangPanel.java (đã bổ sung chức năng Tìm kiếm)
 *
 * Bố cục:
 *  - Dòng 1 (y = 10): Nút Thêm, Sửa, Xóa, Làm mới
 *  - Dòng 2 (y = 50): Panel Search (Họ tên, SĐT, Nút Tìm kiếm)
 *  - Dòng 3 (y = 90): inputPanel ẩn/chỉ hiển thị khi Add/Edit
 *  - Dòng 4 (y = 200): JTable (cao = 310)
 */
public class KhachHangPanel extends JPanel {

    private JTable tblKhachHang;
    private DefaultTableModel tblModel;

    // inputPanel (ẩn khi currentMode == NONE)
    private JPanel inputPanel;
    private JTextField txtIdKH, txtHoTen, txtSDT, txtGioiTinh;
    private JFormattedTextField txtNgayThamGia;
    private JButton btnSave, btnCancel;

    // panel tìm kiếm
    private JTextField txtSearchHoTen, txtSearchSDT;
    private JButton   btnSearch;

    // nút chức năng
    private JButton btnAdd, btnEdit, btnDelete, btnRefresh;

    private KhachHangController controller;
    private String currentMode = "NONE"; // "NONE" | "ADDING" | "EDITING"

    public KhachHangPanel() {
        controller = new KhachHangController();
        initComponents();
        initSearchPanel();
        initInputPanel(false);
        loadDataToTable();
    }

    /**
     * Khởi tạo các thành phần chính:
     *  - Nút Thêm, Sửa, Xóa, Làm mới (y = 10)
     *  - JTable (y = 200, cao = 310)
     */
    private void initComponents() {
    	setPreferredSize(new Dimension(1600, 800));
        setLayout(null);

        // --- Nút chức năng (y = 10) --- //
        btnAdd = new JButton("Thêm");
        btnAdd.setBounds(10, 10, 80, 30);
        add(btnAdd);
        btnAdd.addActionListener(e -> onAdd());

        btnEdit = new JButton("Sửa");
        btnEdit.setBounds(100, 10, 80, 30);
        add(btnEdit);
        btnEdit.addActionListener(e -> onEdit());

        btnDelete = new JButton("Xóa");
        btnDelete.setBounds(190, 10, 80, 30);
        add(btnDelete);
        btnDelete.addActionListener(e -> onDelete());

        btnRefresh = new JButton("Làm mới");
        btnRefresh.setBounds(280, 10, 100, 30);
        add(btnRefresh);
        btnRefresh.addActionListener(e -> onRefresh());

        // --- Bảng dữ liệu (y = 200, cao = 310) --- //
        tblModel = new DefaultTableModel();
        tblModel.setColumnIdentifiers(new String[]{
            "IDKH", "Họ tên", "SĐT", "Giới tính", "Ngày tham gia"
        });
        tblKhachHang = new JTable(tblModel);
        JScrollPane scrollPane = new JScrollPane(tblKhachHang);
        scrollPane.setBounds(10, 200, 860, 310);
        add(scrollPane);

        tblKhachHang.addMouseListener(new MouseAdapter() {
            @Override
            public void mouseClicked(MouseEvent e) {
                int row = tblKhachHang.getSelectedRow();
                if (row >= 0 && currentMode.equals("NONE")) {
                    populateInputFromTable(row);
                }
            }
        });
    }

    /**
     * Khởi tạo panel tìm kiếm (y = 50, cao = 30):
     *  - txtSearchHoTen, txtSearchSDT, btnSearch
     */
    private void initSearchPanel() {
        JPanel searchPanel = new JPanel(null);
        searchPanel.setBounds(10, 50, 860, 30);
        add(searchPanel);

        JLabel lblSearchHoTen = new JLabel("Họ tên:");
        lblSearchHoTen.setBounds(0, 5, 60, 20);
        searchPanel.add(lblSearchHoTen);

        txtSearchHoTen = new JTextField();
        txtSearchHoTen.setBounds(65, 3, 150, 25);
        searchPanel.add(txtSearchHoTen);

        JLabel lblSearchSDT = new JLabel("SĐT:");
        lblSearchSDT.setBounds(230, 5, 40, 20);
        searchPanel.add(lblSearchSDT);

        txtSearchSDT = new JTextField();
        txtSearchSDT.setBounds(275, 3, 120, 25);
        searchPanel.add(txtSearchSDT);

        btnSearch = new JButton("Tìm kiếm");
        btnSearch.setBounds(440, 3, 100, 25);
        searchPanel.add(btnSearch);
        btnSearch.addActionListener(e -> onSearch());
    }

    /**
     * Khởi tạo inputPanel (y = 90, cao = 100), ẩn khi visible = false.
     */
    private void initInputPanel(boolean visible) {
        inputPanel = new JPanel();
        inputPanel.setLayout(null);
        inputPanel.setBounds(10, 90, 860, 100);
        add(inputPanel);

        // IDKH
        JLabel lblIdKH = new JLabel("IDKH:");
        lblIdKH.setBounds(10, 10, 50, 25);
        inputPanel.add(lblIdKH);
        txtIdKH = new JTextField();
        txtIdKH.setBounds(70, 10, 100, 25);
        inputPanel.add(txtIdKH);

        // Họ tên
        JLabel lblHoTen = new JLabel("Họ tên:");
        lblHoTen.setBounds(200, 10, 50, 25);
        inputPanel.add(lblHoTen);
        txtHoTen = new JTextField();
        txtHoTen.setBounds(292, 10, 200, 25);
        inputPanel.add(txtHoTen);

        // SĐT
        JLabel lblSDT = new JLabel("SĐT:");
        lblSDT.setBounds(519, 10, 40, 25);
        inputPanel.add(lblSDT);
        txtSDT = new JTextField();
        txtSDT.setBounds(567, 10, 120, 25);
        inputPanel.add(txtSDT);

        // Giới tính
        JLabel lblGioiTinh = new JLabel("Giới tính:");
        lblGioiTinh.setBounds(10, 45, 60, 25);
        inputPanel.add(lblGioiTinh);
        txtGioiTinh = new JTextField();
        txtGioiTinh.setBounds(70, 45, 100, 25);
        inputPanel.add(txtGioiTinh);

        // Ngày tham gia
        JLabel lblNgay = new JLabel("Ngày tham gia:");
        lblNgay.setBounds(200, 45, 90, 25);
        inputPanel.add(lblNgay);
        txtNgayThamGia = new JFormattedTextField();
        txtNgayThamGia.setBounds(290, 45, 200, 25);
        inputPanel.add(txtNgayThamGia);

        // Nút Lưu
        btnSave = new JButton("Lưu");
        btnSave.setBounds(800, 10, 60, 30);
        inputPanel.add(btnSave);
        btnSave.addActionListener(e -> onSave());

        // Nút Hủy
        btnCancel = new JButton("Hủy");
        btnCancel.setBounds(800, 50, 60, 30);
        inputPanel.add(btnCancel);
        btnCancel.addActionListener(e -> onCancel());

        inputPanel.setVisible(visible);
    }

    /**
     * Tải toàn bộ dữ liệu vào JTable (khi khởi động hoặc khi làm mới).
     */
    private void loadDataToTable() {
        tblModel.setRowCount(0);
        List<KhachHang> list = controller.getAllKhachHang();
        for (KhachHang kh : list) {
            tblModel.addRow(new Object[]{
                kh.getIdKH(),
                kh.getHoTen(),
                kh.getSdt(),
                kh.getGioiTinh(),
                DateHelper.toString(kh.getNgayThamGia(), "dd/MM/yyyy")
            });
        }
    }

    /**
     * Khi nhấn “Tìm kiếm”: lấy họ tên và sdt, gọi controller.searchKhachHang(...),
     * hiển thị kết quả, nếu có ít nhất 1 dòng, tự động chọn dòng đầu tiên.
     */
    private void onSearch() {
        String hoTen = txtSearchHoTen.getText().trim();
        String sdt = txtSearchSDT.getText().trim();

        List<KhachHang> results = controller.searchKhachHang(hoTen, sdt);

        tblModel.setRowCount(0);
        for (KhachHang kh : results) {
            tblModel.addRow(new Object[]{
                kh.getIdKH(),
                kh.getHoTen(),
                kh.getSdt(),
                kh.getGioiTinh(),
                DateHelper.toString(kh.getNgayThamGia(), "dd/MM/yyyy")
            });
        }

        if (!results.isEmpty()) {
            SwingUtilities.invokeLater(() -> {
                tblKhachHang.setRowSelectionInterval(0, 0);
                tblKhachHang.scrollRectToVisible(tblKhachHang.getCellRect(0, 0, true));
            });
        }
    }

    /**
     * Điền dữ liệu từ bảng lên inputPanel (nếu currentMode == NONE).
     */
    private void populateInputFromTable(int row) {
        txtIdKH.setText((String) tblModel.getValueAt(row, 0));
        txtHoTen.setText((String) tblModel.getValueAt(row, 1));
        txtSDT.setText((String) tblModel.getValueAt(row, 2));
        txtGioiTinh.setText((String) tblModel.getValueAt(row, 3));
        txtNgayThamGia.setText((String) tblModel.getValueAt(row, 4));
    }

    /**
     * Ẩn inputPanel và reset fields, enable lại phần tìm kiếm, bảng và các nút.
     */
    private void hideInputPanel() {
        txtIdKH.setText("");
        txtHoTen.setText("");
        txtSDT.setText("");
        txtGioiTinh.setText("");
        txtNgayThamGia.setText("");

        inputPanel.setVisible(false);
        currentMode = "NONE";

        btnAdd.setEnabled(true);
        btnEdit.setEnabled(true);
        btnDelete.setEnabled(true);
        btnRefresh.setEnabled(true);
        tblKhachHang.setEnabled(true);
        btnSearch.setEnabled(true);
        txtSearchHoTen.setEnabled(true);
        txtSearchSDT.setEnabled(true);
    }

    /**
     * Khi bấm “Thêm”: hiện inputPanel, reset ô, disable các thành phần còn lại.
     */
    private void onAdd() {
        currentMode = "ADDING";
        inputPanel.setVisible(true);

        txtIdKH.setText("");
        txtHoTen.setText("");
        txtSDT.setText("");
        txtGioiTinh.setText("");
        txtNgayThamGia.setText("");

        txtIdKH.setEditable(true);

        btnAdd.setEnabled(false);
        btnEdit.setEnabled(false);
        btnDelete.setEnabled(false);
        btnRefresh.setEnabled(false);
        tblKhachHang.setEnabled(false);
        btnSearch.setEnabled(false);
        txtSearchHoTen.setEnabled(false);
        txtSearchSDT.setEnabled(false);
    }

    /**
     * Khi bấm “Sửa”: phải có dòng được chọn, điền dữ liệu vào inputPanel, disable các thành phần khác.
     */
    private void onEdit() {
        int row = tblKhachHang.getSelectedRow();
        if (row < 0) {
            MessageDialog.showWarning(this, "Vui lòng chọn khách hàng cần sửa!", "Cảnh báo");
            return;
        }
        currentMode = "EDITING";
        inputPanel.setVisible(true);

        populateInputFromTable(row);

        txtIdKH.setEditable(false);

        btnAdd.setEnabled(false);
        btnEdit.setEnabled(false);
        btnDelete.setEnabled(false);
        btnRefresh.setEnabled(false);
        tblKhachHang.setEnabled(false);
        btnSearch.setEnabled(false);
        txtSearchHoTen.setEnabled(false);
        txtSearchSDT.setEnabled(false);
    }

    /**
     * Khi bấm “Xóa”: phải có dòng được chọn, xác nhận, gọi controller.deleteKhachHang(idKH).
     */
    private void onSave() {
        // Validate dữ liệu, tạo KhachHang...
        KhachHang kh = new KhachHang();
        kh.setIdKH(txtIdKH.getText().trim());
        kh.setHoTen(txtHoTen.getText().trim());
        kh.setSdt(txtSDT.getText().trim());
        kh.setGioiTinh(txtGioiTinh.getText().trim());
        kh.setNgayThamGia(DateHelper.toDate(txtNgayThamGia.getText().trim(), "dd/MM/yyyy"));

        boolean success;
        StringBuilder errorMsg = new StringBuilder();
        if (currentMode.equals("ADDING")) {
            success = controller.addKhachHang(kh, errorMsg);
            if (success) {
                MessageDialog.showInfo(this, "Thêm thành công!", "Thông báo");
            } else {
                MessageDialog.showError(this, errorMsg.length() > 0 ? errorMsg.toString() : "Thêm thất bại!", "Lỗi");
                return;
            }
        } else { // EDITING
            success = controller.updateKhachHang(kh, errorMsg);
            if (success) {
                MessageDialog.showInfo(this, "Cập nhật thành công!", "Thông báo");
            } else {
                MessageDialog.showError(this, errorMsg.length() > 0 ? errorMsg.toString() : "Cập nhật thất bại!", "Lỗi");
                return;
            }
        }

        hideInputPanel();
        loadDataToTable();
    }

    private void onDelete() {
        int row = tblKhachHang.getSelectedRow();
        if (row < 0) {
            MessageDialog.showWarning(this, "Vui lòng chọn khách hàng cần xóa!", "Cảnh báo");
            return;
        }
        String id = (String) tblModel.getValueAt(row, 0);
        boolean confirm = MessageDialog.showConfirm(this, "Bạn có chắc muốn xóa khách hàng " + id + "?", "Xác nhận");
        if (confirm) {
            StringBuilder errorMsg = new StringBuilder();
            if (controller.deleteKhachHang(id, errorMsg)) {
                MessageDialog.showInfo(this, "Xóa thành công!", "Thông báo");
                loadDataToTable(); // Chỉ KH chưa xóa mới hiện!
            } else {
                MessageDialog.showError(this, errorMsg.length() > 0 ? errorMsg.toString() : "Xóa thất bại!", "Lỗi");
            }
        }
    }

    /**
     * Khi bấm “Làm mới”: ẩn inputPanel (nếu đang hiển thị) và load lại danh sách.
     */
    private void onRefresh() {
        hideInputPanel();
        loadDataToTable();
    }

    /**
     * Khi bấm “Lưu” trong inputPanel:
     *  - validate dữ liệu,
     *  - nếu ADDING, gọi addKhachHang,
     *    nếu EDITING, gọi updateKhachHang,
     *  - ẩn inputPanel, load lại dữ liệu.
     */


    /**
     * Khi bấm “Hủy” trong inputPanel: chỉ cần ẩn inputPanel.
     */
    private void onCancel() {
        hideInputPanel();
    }
}

//This is code of: LoginForm.java
package gui;

import controller.LoginController;
import entities.TaiKhoan;

import javax.swing.*;
import java.awt.*;
import java.awt.event.ActionEvent;
import java.awt.event.ActionListener;

/**
 * LoginForm.java (có thêm nút "Chế độ khách" ở góc dưới bên phải)
 */
public class LoginForm extends JFrame {

    private JPanel contentPane;
    private JTextField txtUsername;
    private JPasswordField txtPassword;
    private JButton btnLogin;
    private JButton btnGuest;      // nút chế độ khách
    private LoginController loginController;

    public LoginForm() {
        setTitle("Đăng nhập hệ thống");
        setDefaultCloseOperation(JFrame.EXIT_ON_CLOSE);
        setSize(400, 260);
        setLocationRelativeTo(null);
        initComponents();
        loginController = new LoginController();
    }

    private void initComponents() {
        contentPane = new JPanel();
        contentPane.setLayout(null);
        setContentPane(contentPane);

        JLabel lblTitle = new JLabel("ĐĂNG NHẬP");
        lblTitle.setFont(new Font("Tahoma", Font.BOLD, 18));
        lblTitle.setBounds(140, 10, 120, 30);
        contentPane.add(lblTitle);

        JLabel lblUser = new JLabel("Username:");
        lblUser.setBounds(50, 60, 80, 25);
        contentPane.add(lblUser);

        txtUsername = new JTextField();
        txtUsername.setBounds(140, 60, 200, 25);
        contentPane.add(txtUsername);

        JLabel lblPass = new JLabel("Password:");
        lblPass.setBounds(50, 100, 80, 25);
        contentPane.add(lblPass);

        txtPassword = new JPasswordField();
        txtPassword.setBounds(140, 100, 200, 25);
        contentPane.add(txtPassword);

        btnLogin = new JButton("Login");
        btnLogin.setBounds(140, 150, 100, 30);
        contentPane.add(btnLogin);
        btnLogin.addActionListener(new ActionListener() {
            @Override
            public void actionPerformed(ActionEvent e) {
                performLogin();
            }
        });

        // Nút "Chế độ khách" ở góc dưới bên phải
        btnGuest = new JButton("Chế độ khách");
        btnGuest.setBounds(260, 200, 120, 25);
        contentPane.add(btnGuest);
        btnGuest.addActionListener(new ActionListener() {
            @Override
            public void actionPerformed(ActionEvent e) {
                openGuestMode();
            }
        });
    }

    /**
     * Xử lý đăng nhập bình thường (Admin/ Nhân viên).
     */
    private void performLogin() {
        String username = txtUsername.getText().trim();
        String password = new String(txtPassword.getPassword()).trim();

        TaiKhoan tk = loginController.authenticateAndGetAccount(username, password);
        if (tk != null) {
            String roleId = tk.getIdVT();  // ví dụ "VT01" (Admin) hoặc "VT02" (Nhân viên)
            MainFrame main = new MainFrame(roleId);
            main.setVisible(true);
            this.dispose();
        } else {
            JOptionPane.showMessageDialog(this,
                    "Sai username hoặc password",
                    "Lỗi đăng nhập",
                    JOptionPane.ERROR_MESSAGE);
        }
    }

    /**
     * Mở chế độ khách: hiển thị Form phản hồi (GuestFeedbackForm).
     */
    private void openGuestMode() {
        // Không cần thông tin đăng nhập, mở thẳng form
        GuestFeedbackForm guestForm = new GuestFeedbackForm();
        guestForm.setVisible(true);
        this.dispose();  // Đóng cửa sổ LoginForm
    }

    public static void main(String[] args) {
        SwingUtilities.invokeLater(() -> {
            LoginForm login = new LoginForm();
            login.setVisible(true);
        });
    }
}

//This is code of: MainFrame.java
package gui;

import javax.swing.*;
import java.awt.*;
import java.awt.event.*;

/**
 * MainFrame.java (đã sửa initTabs(...) để luôn thêm ít nhất một vài tab nếu roleId không khớp).
 */
public class MainFrame extends JFrame {

    private JTabbedPane tabbedPane;
    private ThuocPanel thuocPanel;
    private NhanVienPanel nhanVienPanel;
    private KhachHangPanel khachHangPanel;
    private NhaCungCapPanel nhaCungCapPanel;
    private HoaDonPanel hoaDonPanel;
    private PhieuNhapPanel phieuNhapPanel;
    private PhanHoiPanel phanHoiPanel;
    private HopDongPanel hopDongPanel;

    /**
     * @param roleId Chuỗi idVT (vai trò) của người dùng.
     *               Thường là "VT01" = Admin, hoặc "VT02" = Nhân viên.
     */
    public MainFrame(String roleId) {
        setTitle("Hệ thống Quản lý Nhà thuốc");
        setDefaultCloseOperation(JFrame.EXIT_ON_CLOSE);
        setSize(900, 600);
        setLocationRelativeTo(null);

        // Khởi tạo giao diện
        initTopBar();
        initTabs(roleId);
    }

    /**
     * Tạo thanh trên cùng chứa nút Đăng xuất ở góc trên bên phải.
     */
    private void initTopBar() {
        // Panel vùng NORTH dùng BorderLayout để đặt nút ở Đông
        JPanel topBar = new JPanel(new BorderLayout());
        topBar.setPreferredSize(new Dimension(getWidth(), 40));
        topBar.setBackground(new Color(240, 240, 240));

        // Khoảng trống phía trái (để nút nằm góc phải)
        JPanel glue = new JPanel();
        glue.setOpaque(false);
        topBar.add(glue, BorderLayout.CENTER);

        // Nút Đăng xuất
        JButton btnLogout = new JButton("Đăng xuất");
        btnLogout.setFocusPainted(false);
        btnLogout.setMargin(new Insets(5, 10, 5, 10));
        btnLogout.addActionListener(e -> {
            // Đóng MainFrame và mở lại LoginForm
            dispose();
            SwingUtilities.invokeLater(() -> {
                LoginForm login = new LoginForm();
                login.setVisible(true);
            });
        });

        // Đặt nút ở góc trên bên phải (BorderLayout.EAST)
        topBar.add(btnLogout, BorderLayout.EAST);

        getContentPane().add(topBar, BorderLayout.NORTH);
    }

    /**
     * Tạo JTabbedPane theo vai trò và thêm vào vùng CENTER.
     * Nếu roleId không khớp "VT01" hay "VT02", vẫn thêm tab "Thuốc" để tránh giao diện trắng.
     */
    private void initTabs(String roleId) {
        tabbedPane = new JTabbedPane();

        // Khởi tạo tất cả panel trước (có NhaCungCapPanel mới)
        thuocPanel        = new ThuocPanel();
        nhanVienPanel     = new NhanVienPanel();
        khachHangPanel    = new KhachHangPanel();
        nhaCungCapPanel   = new NhaCungCapPanel();
        hoaDonPanel       = new HoaDonPanel();
        phieuNhapPanel    = new PhieuNhapPanel();
        phanHoiPanel      = new PhanHoiPanel();
        hopDongPanel      = new HopDongPanel();

        if (roleId != null) {
            roleId = roleId.trim(); // bỏ dấu cách thừa
        }

        // Nếu roleId = "VT01" => Admin, hiển thị đủ 8 tab
        if ("VT01".equalsIgnoreCase(roleId)) {
            tabbedPane.addTab("Thuốc", thuocPanel);
            tabbedPane.addTab("Nhân viên", nhanVienPanel);
            tabbedPane.addTab("Khách hàng", khachHangPanel);
            tabbedPane.addTab("Nhà cung cấp", nhaCungCapPanel);
            tabbedPane.addTab("Hóa đơn", hoaDonPanel);
            tabbedPane.addTab("Phiếu nhập", phieuNhapPanel);
            tabbedPane.addTab("Phản hồi", phanHoiPanel);
            tabbedPane.addTab("Hợp đồng", hopDongPanel);
        }
        // Nếu roleId = "VT02" => Nhân viên, hiển thị 6 tab
        else if ("VT02".equalsIgnoreCase(roleId)) {
            tabbedPane.addTab("Thuốc", thuocPanel);
            tabbedPane.addTab("Khách hàng", khachHangPanel);
            tabbedPane.addTab("Hóa đơn", hoaDonPanel);
            tabbedPane.addTab("Phiếu nhập", phieuNhapPanel);
            tabbedPane.addTab("Phản hồi", phanHoiPanel);
            // Nhân viên cũng được truy cập "Hợp đồng"?
            tabbedPane.addTab("Hợp đồng", hopDongPanel);
        }
        // Nếu roleId khác (hoặc null/empty), ít nhất cho hiển thị tab "Thuốc" để không bị trắng
        else {
            tabbedPane.addTab("Thuốc", thuocPanel);
            // bạn có thể thêm tab "Khách hàng" mặc định nếu muốn
            tabbedPane.addTab("Khách hàng", khachHangPanel);
        }

        getContentPane().add(tabbedPane, BorderLayout.CENTER);
    }
}
//This is code of: NhaCungCapPanel.java
package gui;

import controller.NhaCungCapController;
import entities.NhaCungCap;
import utils.MessageDialog;
import utils.Validator;

import javax.swing.*;
import javax.swing.table.DefaultTableModel;
import java.awt.event.MouseAdapter;
import java.awt.event.MouseEvent;
import java.util.List;
import java.awt.Dimension;
/**
 * NhaCungCapPanel.java
 *
 * - Có 4 nút: Thêm, Sửa, Xóa, Làm mới (y = 10)
 * - Dưới đó (y = 50): panel Tìm kiếm (IDNCC, TenNCC, nút Tìm kiếm)
 * - Tiếp theo (y = 90): panel nhập liệu (ẩn khi khởi tạo)
 * - Cuối cùng (y = 200): JTable (cao khoảng 310) hiển thị kết quả.
 */
public class NhaCungCapPanel extends JPanel {

    private JTable tblNCC;
    private DefaultTableModel tblModel;

    // Panel nhập liệu (ẩn khi currentMode == "NONE")
    private JPanel inputPanel;
    private JTextField txtIdNCC, txtTenNCC, txtSdt, txtDiaChi;
    private JButton btnSave, btnCancel;

    // Panel tìm kiếm
    private JTextField txtSearchIdNCC, txtSearchTenNCC;
    private JButton btnSearch;

    // 4 nút chức năng
    private JButton btnAdd, btnEdit, btnDelete, btnRefresh;

    private NhaCungCapController controller;
    private String currentMode = "NONE"; // "NONE" | "ADDING" | "EDITING"

    public NhaCungCapPanel() {
        controller = new NhaCungCapController();
        initComponents();
        initSearchPanel();
        initInputPanel(false);
        loadDataToTable();
    }

    /**
     * Khởi tạo 4 nút chức năng (y = 10) và JTable (y = 200, cao = 310).
     */
    private void initComponents() {
        setLayout(null);
        //setPreferredSize(new Dimension(1600, 800));

        // --- Nút Thêm ---
        btnAdd = new JButton("Thêm");
        btnAdd.setBounds(10, 10, 80, 30);
        add(btnAdd);
        btnAdd.addActionListener(e -> onAdd());

        // --- Nút Sửa ---
        btnEdit = new JButton("Sửa");
        btnEdit.setBounds(100, 10, 80, 30);
        add(btnEdit);
        btnEdit.addActionListener(e -> onEdit());

        // --- Nút Xóa ---
        btnDelete = new JButton("Xóa");
        btnDelete.setBounds(190, 10, 80, 30);
        add(btnDelete);
        btnDelete.addActionListener(e -> onDelete());

        // --- Nút Làm Mới ---
        btnRefresh = new JButton("Làm mới");
        btnRefresh.setBounds(280, 10, 100, 30);
        add(btnRefresh);
        btnRefresh.addActionListener(e -> onRefresh());

        // --- JTable hiển thị dữ liệu NhaCungCap (y = 200, cao = 310) ---
        tblModel = new DefaultTableModel();
        tblModel.setColumnIdentifiers(new String[]{
            "IDNCC", "Tên NCC", "SĐT", "Địa chỉ"
        });
        tblNCC = new JTable(tblModel);
        JScrollPane scrollPane = new JScrollPane(tblNCC);
        scrollPane.setBounds(10, 200, 860, 310);
        add(scrollPane);

        tblNCC.addMouseListener(new MouseAdapter() {
            @Override
            public void mouseClicked(MouseEvent e) {
                int row = tblNCC.getSelectedRow();
                if (row >= 0 && currentMode.equals("NONE")) {
                    populateInputFromTable(row);
                }
            }
        });
    }

    /**
     * Khởi tạo panel tìm kiếm (IDNCC, TenNCC, nút Tìm kiếm) (y = 50, cao = 30).
     */
    private void initSearchPanel() {
        JPanel searchPanel = new JPanel(null);
        searchPanel.setBounds(10, 50, 860, 30);
        add(searchPanel);

        JLabel lblSearchIdNCC = new JLabel("IDNCC:");
        lblSearchIdNCC.setBounds(0, 5, 60, 20);
        searchPanel.add(lblSearchIdNCC);

        txtSearchIdNCC = new JTextField();
        txtSearchIdNCC.setBounds(65, 3, 120, 25);
        searchPanel.add(txtSearchIdNCC);

        JLabel lblSearchTenNCC = new JLabel("Tên NCC:");
        lblSearchTenNCC.setBounds(200, 5, 70, 20);
        searchPanel.add(lblSearchTenNCC);

        txtSearchTenNCC = new JTextField();
        txtSearchTenNCC.setBounds(275, 3, 150, 25);
        searchPanel.add(txtSearchTenNCC);

        btnSearch = new JButton("Tìm kiếm");
        btnSearch.setBounds(450, 3, 100, 25);
        searchPanel.add(btnSearch);
        btnSearch.addActionListener(e -> onSearch());
    }

    /**
     * Khởi tạo inputPanel (ẩn khi visible = false) (y = 90, cao = 100):
     *  - txtIdNCC, txtTenNCC, txtSdt, txtDiaChi, btnSave, btnCancel.
     */
    private void initInputPanel(boolean visible) {
        inputPanel = new JPanel(null);
        inputPanel.setBounds(10, 90, 860, 100);
        add(inputPanel);

        // IDNCC
        JLabel lblIdNCC = new JLabel("IDNCC:");
        lblIdNCC.setBounds(10, 10, 60, 25);
        inputPanel.add(lblIdNCC);
        txtIdNCC = new JTextField();
        txtIdNCC.setBounds(80, 10, 120, 25);
        inputPanel.add(txtIdNCC);

        // Tên NCC
        JLabel lblTenNCC = new JLabel("Tên NCC:");
        lblTenNCC.setBounds(220, 10, 70, 25);
        inputPanel.add(lblTenNCC);
        txtTenNCC = new JTextField();
        txtTenNCC.setBounds(300, 10, 382, 25);
        inputPanel.add(txtTenNCC);

        // SĐT
        JLabel lblSdt = new JLabel("SĐT:");
        lblSdt.setBounds(508, 45, 40, 25);
        inputPanel.add(lblSdt);
        txtSdt = new JTextField();
        txtSdt.setBounds(562, 45, 120, 25);
        inputPanel.add(txtSdt);

        // Địa chỉ
        JLabel lblDiaChi = new JLabel("Địa chỉ:");
        lblDiaChi.setBounds(10, 45, 60, 25);
        inputPanel.add(lblDiaChi);
        txtDiaChi = new JTextField();
        txtDiaChi.setBounds(80, 45, 400, 25);
        inputPanel.add(txtDiaChi);

        // Nút Lưu
        btnSave = new JButton("Lưu");
        btnSave.setBounds(800, 10, 60, 30);
        inputPanel.add(btnSave);
        btnSave.addActionListener(e -> onSave());

        // Nút Hủy
        btnCancel = new JButton("Hủy");
        btnCancel.setBounds(800, 50, 60, 30);
        inputPanel.add(btnCancel);
        btnCancel.addActionListener(e -> onCancel());

        inputPanel.setVisible(visible);
    }

    /**
     * Load toàn bộ dữ liệu Nhà cung cấp vào JTable.
     */
    private void loadDataToTable() {
        tblModel.setRowCount(0);
        List<NhaCungCap> list = controller.getAllNhaCungCap();
        for (NhaCungCap ncc : list) {
            tblModel.addRow(new Object[]{
                ncc.getIdNCC(),
                ncc.getTenNCC(),
                ncc.getSdt(),
                ncc.getDiaChi()
            });
        }
    }

    /**
     * Xử lý khi nhấn nút “Tìm kiếm”:
     *  - Lấy giá trị từ txtSearchIdNCC, txtSearchTenNCC,
     *  - Gọi controller.searchNhaCungCap(...),
     *  - Hiển thị kết quả lên table; nếu có dòng, tự động chọn dòng đầu tiên.
     */
    private void onSearch() {
        String idNCC = txtSearchIdNCC.getText().trim();
        String tenNCC = txtSearchTenNCC.getText().trim();

        List<NhaCungCap> results = controller.searchNhaCungCap(idNCC, tenNCC);

        tblModel.setRowCount(0);
        for (NhaCungCap ncc : results) {
            tblModel.addRow(new Object[]{
                ncc.getIdNCC(),
                ncc.getTenNCC(),
                ncc.getSdt(),
                ncc.getDiaChi()
            });
        }

        if (!results.isEmpty()) {
            SwingUtilities.invokeLater(() -> {
                tblNCC.setRowSelectionInterval(0, 0);
                tblNCC.scrollRectToVisible(tblNCC.getCellRect(0, 0, true));
            });
        }
    }

    /**
     * Điền dữ liệu từ hàng table được chọn lên các ô input (nếu currentMode == "NONE").
     */
    private void populateInputFromTable(int row) {
        txtIdNCC.setText((String) tblModel.getValueAt(row, 0));
        txtTenNCC.setText((String) tblModel.getValueAt(row, 1));
        txtSdt.setText((String) tblModel.getValueAt(row, 2));
        txtDiaChi.setText((String) tblModel.getValueAt(row, 3));
    }

    /**
     * Ẩn inputPanel và reset các ô, enable lại các thành phần tìm kiếm và table.
     */
    private void hideInputPanel() {
        txtIdNCC.setText("");
        txtTenNCC.setText("");
        txtSdt.setText("");
        txtDiaChi.setText("");

        inputPanel.setVisible(false);
        currentMode = "NONE";

        btnAdd.setEnabled(true);
        btnEdit.setEnabled(true);
        btnDelete.setEnabled(true);
        btnRefresh.setEnabled(true);
        tblNCC.setEnabled(true);
        btnSearch.setEnabled(true);
        txtSearchIdNCC.setEnabled(true);
        txtSearchTenNCC.setEnabled(true);
    }

    /**
     * Khi bấm “Thêm”:
     *  - Hiện inputPanel (rỗng),
     *  - Disable các nút khác, bảng và panel tìm kiếm,
     *  - currentMode = "ADDING".
     */
    private void onAdd() {
        currentMode = "ADDING";
        inputPanel.setVisible(true);

        txtIdNCC.setText("");
        txtTenNCC.setText("");
        txtSdt.setText("");
        txtDiaChi.setText("");

        txtIdNCC.setEditable(true);

        btnAdd.setEnabled(false);
        btnEdit.setEnabled(false);
        btnDelete.setEnabled(false);
        btnRefresh.setEnabled(false);
        tblNCC.setEnabled(false);
        btnSearch.setEnabled(false);
        txtSearchIdNCC.setEnabled(false);
        txtSearchTenNCC.setEnabled(false);
    }

    /**
     * Khi bấm “Sửa”:
     *  - Phải có hàng được chọn trên table,
     *  - Điền dữ liệu lên inputPanel,
     *  - Disable các nút khác, bảng và panel tìm kiếm,
     *  - currentMode = "EDITING".
     */
    private void onEdit() {
        int row = tblNCC.getSelectedRow();
        if (row < 0) {
            MessageDialog.showWarning(this, "Vui lòng chọn Nhà cung cấp cần sửa!", "Cảnh báo");
            return;
        }
        currentMode = "EDITING";
        inputPanel.setVisible(true);

        populateInputFromTable(row);

        txtIdNCC.setEditable(false);

        btnAdd.setEnabled(false);
        btnEdit.setEnabled(false);
        btnDelete.setEnabled(false);
        btnRefresh.setEnabled(false);
        tblNCC.setEnabled(false);
        btnSearch.setEnabled(false);
        txtSearchIdNCC.setEnabled(false);
        txtSearchTenNCC.setEnabled(false);
    }

    /**
     * Khi bấm “Xóa”:
     *  - Phải có hàng được chọn,
     *  - Yêu cầu xác nhận trước khi xóa,
     *  - Gọi controller.deleteNhaCungCap(idNCC),
     *  - Nếu thành công, load lại table.
     */
    private void onDelete() {
        int row = tblNCC.getSelectedRow();
        if (row < 0) {
            MessageDialog.showWarning(this, "Vui lòng chọn Nhà cung cấp cần xóa!", "Cảnh báo");
            return;
        }
        String id = (String) tblModel.getValueAt(row, 0);
        boolean confirm = MessageDialog.showConfirm(this, "Bạn có chắc muốn xóa Nhà cung cấp " + id + "?", "Xác nhận");
        if (confirm) {
            if (controller.deleteNhaCungCap(id)) {
                MessageDialog.showInfo(this, "Xóa thành công!", "Thông báo");
                loadDataToTable();
            } else {
                MessageDialog.showError(this, "Xóa thất bại!", "Lỗi");
            }
        }
    }


    /**
     * Khi bấm “Làm mới”:
     *  - Ẩn inputPanel nếu đang hiển thị,
     *  - Load lại toàn bộ dữ liệu.
     */
    private void onRefresh() {
        hideInputPanel();
        loadDataToTable();
    }

    /**
     * Khi bấm “Lưu” trong inputPanel:
     *  - Kiểm tra dữ liệu hợp lệ (ID không được rỗng,
     *    Tên không được rỗng, SĐT phải đúng định dạng, v.v.),
     *  - Nếu currentMode == "ADDING": gọi addNhaCungCap,
     *    nếu currentMode == "EDITING": gọi updateNhaCungCap,
     *  - Ẩn inputPanel, reload table.
     */
    private void onSave() {
        String idNCC = txtIdNCC.getText().trim();
        String tenNCC = txtTenNCC.getText().trim();
        String sdt = txtSdt.getText().trim();
        String diaChi = txtDiaChi.getText().trim();

        if (idNCC.isEmpty()) {
            MessageDialog.showWarning(this, "IDNCC không được để trống!", "Cảnh báo");
            return;
        }
        if (tenNCC.isEmpty()) {
            MessageDialog.showWarning(this, "Tên Nhà cung cấp không được để trống!", "Cảnh báo");
            return;
        }
        if (!Validator.isPhone(sdt)) {
            MessageDialog.showWarning(this, "SĐT không hợp lệ!", "Cảnh báo");
            return;
        }
        // Địa chỉ có thể để trống hoặc kiểm tra tùy nhu cầu.

        NhaCungCap ncc = new NhaCungCap();
        ncc.setIdNCC(idNCC);
        ncc.setTenNCC(tenNCC);
        ncc.setSdt(sdt);
        ncc.setDiaChi(diaChi);

        boolean success;
        if (currentMode.equals("ADDING")) {
            success = controller.addNhaCungCap(ncc);
            if (success) {
                MessageDialog.showInfo(this, "Thêm thành công!", "Thông báo");
            } else {
                MessageDialog.showError(this, "Thêm thất bại! Kiểm tra lại ID hoặc kết nối DB.", "Lỗi");
                return;
            }
        } else { // EDITING
            success = controller.updateNhaCungCap(ncc);
            if (success) {
                MessageDialog.showInfo(this, "Cập nhật thành công!", "Thông báo");
            } else {
                MessageDialog.showError(this, "Cập nhật thất bại! Kiểm tra lại dữ liệu.", "Lỗi");
                return;
            }
        }

        hideInputPanel();
        loadDataToTable();
    }

    /**
     * Khi bấm “Hủy” trong inputPanel:
     *  - Chỉ cần ẩn inputPanel, không thay đổi dữ liệu.
     */
    private void onCancel() {
        hideInputPanel();
    }
}

//This is code of: NhanVienPanel.java
package gui;

import controller.NhanVienController;
import entities.NhanVien;
import utils.DateHelper;
import utils.MessageDialog;
import utils.Validator;

import javax.swing.*;
import javax.swing.table.DefaultTableModel;
import java.awt.event.MouseAdapter;
import java.awt.event.MouseEvent;
import java.util.List;
import java.awt.Dimension;


/**
 * NhanVienPanel.java (đã sửa để hiển thị thêm cột luong và trangThai, đồng thời form Add/Edit có thêm hai ô nhập Luong và TrangThai)
 *
 * Bố cục:
 *  - Row 1 (y = 10): 4 nút chức năng Thêm, Sửa, Xóa, Làm mới
 *  - Row 2 (y = 50): Panel Tìm kiếm (IDNV, Họ tên, nút Tìm kiếm)
 *  - Row 3 (y = 90): inputPanel ẩn/hiện khi Add/Edit (có thêm 2 ô Luong, TrangThai)
 *  - Row 4 (y = 200): JTable (cao = 310) hiển thị toàn bộ cột mới
 */
public class NhanVienPanel extends JPanel {

    private JTable tblNhanVien;
    private DefaultTableModel tblModel;

    // Panel nhập liệu (ẩn khi currentMode == "NONE")
    private JPanel inputPanel;
    private JTextField txtIdNV, txtHoTen, txtSdt, txtGioiTinh, txtNamSinh, txtNgayVaoLam;
    private JTextField txtLuong, txtTrangThai;        // <-- mới
    private JTextField txtUsername, txtPassword;       // (vẫn giữ)
    private JButton btnSave, btnCancel;

    // Panel tìm kiếm
    private JTextField txtSearchIdNV, txtSearchHoTen;
    private JButton btnSearch;

    // 4 nút chức năng
    private JButton btnAdd, btnEdit, btnDelete, btnRefresh;

    private NhanVienController controller;
    private String currentMode = "NONE"; // "NONE" | "ADDING" | "EDITING"

    public NhanVienPanel() {
        controller = new NhanVienController();
        initComponents();
        initSearchPanel();
        initInputPanel(false);
        loadDataToTable();
    }

    /**
     * Khởi tạo các thành phần chính:
     *  - Nút Thêm, Sửa, Xóa, Làm mới (y = 10)
     *  - JTable (y = 200, cao = 310) hiển thị 10 cột: IDNV, Họ tên, SĐT, Giới tính, Năm sinh, Ngày vào làm, Luong, TrangThai, Tài khoản, Mật khẩu
     */
    private void initComponents() {
    	setPreferredSize(new Dimension(1600, 1200));
        setLayout(null);

        // --- Nút chức năng (y = 10) --- //
        btnAdd = new JButton("Thêm");
        btnAdd.setBounds(10, 10, 80, 30);
        add(btnAdd);
        btnAdd.addActionListener(e -> onAdd());

        btnEdit = new JButton("Sửa");
        btnEdit.setBounds(100, 10, 80, 30);
        add(btnEdit);
        btnEdit.addActionListener(e -> onEdit());

        btnDelete = new JButton("Xóa");
        btnDelete.setBounds(190, 10, 80, 30);
        add(btnDelete);
        btnDelete.addActionListener(e -> onDelete());

        btnRefresh = new JButton("Làm mới");
        btnRefresh.setBounds(280, 10, 100, 30);
        add(btnRefresh);
        btnRefresh.addActionListener(e -> onRefresh());

        // --- Bảng dữ liệu (y = 200, cao = 310) --- //
        tblModel = new DefaultTableModel();
        tblModel.setColumnIdentifiers(new String[]{
            "IDNV", "Họ tên", "SĐT", "Giới tính", "Năm sinh", "Ngày vào làm",
            "Lương", "Trạng thái", "Tài khoản", "Mật khẩu"
        });
        tblNhanVien = new JTable(tblModel);
        JScrollPane scrollPane = new JScrollPane(tblNhanVien);
        scrollPane.setBounds(10, 200, 860, 310);
        add(scrollPane);

        tblNhanVien.addMouseListener(new MouseAdapter() {
            @Override
            public void mouseClicked(MouseEvent e) {
                int row = tblNhanVien.getSelectedRow();
                if (row >= 0 && currentMode.equals("NONE")) {
                    populateInputFromTable(row);
                }
            }
        });
    }

    /**
     * Khởi tạo panel tìm kiếm (y = 50, cao = 30):
     *  - txtSearchIdNV, txtSearchHoTen, btnSearch
     */
    private void initSearchPanel() {
        JPanel searchPanel = new JPanel(null);
        searchPanel.setBounds(10, 50, 860, 30);
        add(searchPanel);

        JLabel lblSearchIdNV = new JLabel("IDNV:");
        lblSearchIdNV.setBounds(0, 5, 50, 20);
        searchPanel.add(lblSearchIdNV);

        txtSearchIdNV = new JTextField();
        txtSearchIdNV.setBounds(55, 3, 120, 25);
        searchPanel.add(txtSearchIdNV);

        JLabel lblSearchHoTen = new JLabel("Họ tên:");
        lblSearchHoTen.setBounds(200, 5, 60, 20);
        searchPanel.add(lblSearchHoTen);

        txtSearchHoTen = new JTextField();
        txtSearchHoTen.setBounds(265, 3, 150, 25);
        searchPanel.add(txtSearchHoTen);

        btnSearch = new JButton("Tìm kiếm");
        btnSearch.setBounds(450, 3, 100, 25);
        searchPanel.add(btnSearch);
        btnSearch.addActionListener(e -> onSearch());
    }

    /**
     * Khởi tạo inputPanel (y = 90, cao = 100), ẩn khi visible = false.
     * Gồm các ô: IDNV, HoTen, Sdt, GioiTinh, NamSinh, NgayVaoLam, Luong, TrangThai, Username, Password,
     * và 2 nút Lưu, Hủy.
     */
    private void initInputPanel(boolean visible) {
        inputPanel = new JPanel(null);
        inputPanel.setBounds(10, 90, 860, 100);
        add(inputPanel);

        // IDNV
        JLabel lblIdNV = new JLabel("IDNV:");
        lblIdNV.setBounds(10, 10, 50, 25);
        inputPanel.add(lblIdNV);
        txtIdNV = new JTextField();
        txtIdNV.setBounds(80, 10, 80, 25);
        inputPanel.add(txtIdNV);

        // Họ tên
        JLabel lblHoTen = new JLabel("Họ tên:");
        lblHoTen.setBounds(200, 10, 60, 25);
        inputPanel.add(lblHoTen);
        txtHoTen = new JTextField();
        txtHoTen.setBounds(260, 10, 200, 25);
        inputPanel.add(txtHoTen);

        // SĐT
        JLabel lblSdt = new JLabel("SĐT:");
        lblSdt.setBounds(480, 10, 40, 25);
        inputPanel.add(lblSdt);
        txtSdt = new JTextField();
        txtSdt.setBounds(568, 10, 120, 25);
        inputPanel.add(txtSdt);

        // Giới tính
        JLabel lblGioiTinh = new JLabel("Giới tính:");
        lblGioiTinh.setBounds(10, 40, 60, 25);
        inputPanel.add(lblGioiTinh);
        txtGioiTinh = new JTextField();
        txtGioiTinh.setBounds(80, 40, 80, 25);
        inputPanel.add(txtGioiTinh);

        // Năm sinh
        JLabel lblNamSinh = new JLabel("Năm sinh:");
        lblNamSinh.setBounds(623, 70, 65, 25);
        inputPanel.add(lblNamSinh);
        txtNamSinh = new JTextField();
        txtNamSinh.setBounds(691, 70, 80, 25);
        inputPanel.add(txtNamSinh);

        // Ngày vào làm
        JLabel lblNgayVaoLam = new JLabel("Ngày vào:");
        lblNgayVaoLam.setBounds(200, 40, 70, 25);
        inputPanel.add(lblNgayVaoLam);
        txtNgayVaoLam = new JTextField();
        txtNgayVaoLam.setBounds(260, 40, 120, 25);
        inputPanel.add(txtNgayVaoLam);

        // Lương
        JLabel lblLuong = new JLabel("Lương:");
        lblLuong.setBounds(440, 70, 60, 25);
        inputPanel.add(lblLuong);
        txtLuong = new JTextField();
        txtLuong.setBounds(505, 70, 97, 25);
        inputPanel.add(txtLuong);

        // Trạng thái
        JLabel lblTrangThai = new JLabel("Trạng thái:");
        lblTrangThai.setBounds(480, 45, 70, 25);
        inputPanel.add(lblTrangThai);
        txtTrangThai = new JTextField();
        txtTrangThai.setBounds(568, 40, 130, 25);
        inputPanel.add(txtTrangThai);

        // Tài khoản
        JLabel lblUsername = new JLabel("Tài khoản:");
        lblUsername.setBounds(10, 70, 70, 25);
        inputPanel.add(lblUsername);
        txtUsername = new JTextField();
        txtUsername.setBounds(79, 70, 103, 25);
        inputPanel.add(txtUsername);

        // Mật khẩu
        JLabel lblPassword = new JLabel("Mật khẩu:");
        lblPassword.setBounds(200, 70, 60, 25);
        inputPanel.add(lblPassword);
        txtPassword = new JTextField();
        txtPassword.setBounds(260, 70, 150, 25);
        inputPanel.add(txtPassword);

        // Nút Lưu
        btnSave = new JButton("Lưu");
        btnSave.setBounds(800, 10, 60, 30);
        inputPanel.add(btnSave);
        btnSave.addActionListener(e -> onSave());

        // Nút Hủy
        btnCancel = new JButton("Hủy");
        btnCancel.setBounds(800, 50, 60, 30);
        inputPanel.add(btnCancel);
        btnCancel.addActionListener(e -> onCancel());

        inputPanel.setVisible(visible);
    }

    /**
     * Load dữ liệu NhanVien vào JTable, gồm các cột:
     *  IDNV, Họ tên, SĐT, Giới tính, Năm sinh, Ngày vào làm, Lương, Trạng thái, Tài khoản, Mật khẩu.
     */
    private void loadDataToTable() {
        tblModel.setRowCount(0);
        List<NhanVien> list = controller.getAllNhanVien();
        for (NhanVien nv : list) {
            tblModel.addRow(new Object[]{
                nv.getIdNV(),
                nv.getHoTen(),
                nv.getSdt(),
                nv.getGioiTinh(),
                nv.getNamSinh(),
                DateHelper.toString(nv.getNgayVaoLam(), "dd/MM/yyyy"),
                nv.getLuong(),
                nv.getTrangThai(),
                nv.getUsername() != null ? nv.getUsername() : "",
                nv.getPassword() != null ? nv.getPassword() : ""
            });
        }
    }

    /**
     * Khi nhấn “Tìm kiếm”: lấy idNV, hoTen, gọi controller.searchNhanVien(...),
     * hiển thị kết quả, chọn tự động dòng đầu tiên nếu có.
     */
    private void onSearch() {
        String idNV = txtSearchIdNV.getText().trim();
        String hoTen = txtSearchHoTen.getText().trim();

        List<NhanVien> results = controller.searchNhanVien(idNV, hoTen);

        tblModel.setRowCount(0);
        for (NhanVien nv : results) {
            tblModel.addRow(new Object[]{
                nv.getIdNV(),
                nv.getHoTen(),
                nv.getSdt(),
                nv.getGioiTinh(),
                nv.getNamSinh(),
                DateHelper.toString(nv.getNgayVaoLam(), "dd/MM/yyyy"),
                nv.getLuong(),
                nv.getTrangThai(),
                nv.getUsername() != null ? nv.getUsername() : "",
                nv.getPassword() != null ? nv.getPassword() : ""
            });
        }

        if (!results.isEmpty()) {
            SwingUtilities.invokeLater(() -> {
                tblNhanVien.setRowSelectionInterval(0, 0);
                tblNhanVien.scrollRectToVisible(tblNhanVien.getCellRect(0, 0, true));
            });
        }
    }

    /**
     * Điền dữ liệu từ hàng bảng lên inputPanel (nếu currentMode == "NONE").
     * Gồm cả hai cột mới Luong và TrangThai.
     */
    private void populateInputFromTable(int row) {
        txtIdNV.setText((String) tblModel.getValueAt(row, 0));
        txtHoTen.setText((String) tblModel.getValueAt(row, 1));
        txtSdt.setText((String) tblModel.getValueAt(row, 2));
        txtGioiTinh.setText((String) tblModel.getValueAt(row, 3));
        txtNamSinh.setText(tblModel.getValueAt(row, 4).toString());
        txtNgayVaoLam.setText((String) tblModel.getValueAt(row, 5));
        txtLuong.setText((String) tblModel.getValueAt(row, 6));
        txtTrangThai.setText((String) tblModel.getValueAt(row, 7));
        txtUsername.setText((String) tblModel.getValueAt(row, 8));
        txtPassword.setText((String) tblModel.getValueAt(row, 9));
    }

    /**
     * Ẩn inputPanel và reset giá trị các ô, đồng thời enable lại mọi thành phần khác.
     */
    private void hideInputPanel() {
        txtIdNV.setText("");
        txtHoTen.setText("");
        txtSdt.setText("");
        txtGioiTinh.setText("");
        txtNamSinh.setText("");
        txtNgayVaoLam.setText("");
        txtLuong.setText("");
        txtTrangThai.setText("");
        txtUsername.setText("");
        txtPassword.setText("");

        inputPanel.setVisible(false);
        currentMode = "NONE";

        btnAdd.setEnabled(true);
        btnEdit.setEnabled(true);
        btnDelete.setEnabled(true);
        btnRefresh.setEnabled(true);
        tblNhanVien.setEnabled(true);
        btnSearch.setEnabled(true);
        txtSearchIdNV.setEnabled(true);
        txtSearchHoTen.setEnabled(true);
    }

    /**
     * Khi bấm “Thêm”:
     *  - Hiện inputPanel (rỗng),
     *  - Disable các nút khác, bảng và panel tìm kiếm,
     *  - currentMode = "ADDING".
     */
    private void onAdd() {
        currentMode = "ADDING";
        inputPanel.setVisible(true);

        txtIdNV.setText("");
        txtHoTen.setText("");
        txtSdt.setText("");
        txtGioiTinh.setText("");
        txtNamSinh.setText("");
        txtNgayVaoLam.setText("");
        txtLuong.setText("");
        txtTrangThai.setText("");
        txtUsername.setText("");
        txtPassword.setText("");

        txtIdNV.setEditable(true);

        btnAdd.setEnabled(false);
        btnEdit.setEnabled(false);
        btnDelete.setEnabled(false);
        btnRefresh.setEnabled(false);
        tblNhanVien.setEnabled(false);
        btnSearch.setEnabled(false);
        txtSearchIdNV.setEnabled(false);
        txtSearchHoTen.setEnabled(false);
    }

    /**
     * Khi bấm “Sửa”:
     *  - Phải có hàng được chọn trên bảng,
     *  - Điền dữ liệu lên inputPanel,
     *  - Disable các nút khác, bảng và panel tìm kiếm,
     *  - currentMode = "EDITING".
     */
    private void onEdit() {
        int row = tblNhanVien.getSelectedRow();
        if (row < 0) {
            MessageDialog.showWarning(this, "Vui lòng chọn nhân viên cần sửa!", "Cảnh báo");
            return;
        }
        currentMode = "EDITING";
        inputPanel.setVisible(true);

        populateInputFromTable(row);

        txtIdNV.setEditable(false);

        btnAdd.setEnabled(false);
        btnEdit.setEnabled(false);
        btnDelete.setEnabled(false);
        btnRefresh.setEnabled(false);
        tblNhanVien.setEnabled(false);
        btnSearch.setEnabled(false);
        txtSearchIdNV.setEnabled(false);
        txtSearchHoTen.setEnabled(false);
    }

    /**
     * Khi bấm “Xóa”:
     *  - Phải có hàng được chọn,
     *  - Xác nhận trước khi xóa,
     *  - Gọi controller.deleteNhanVien(idNV), nếu thành công reload bảng.
     */
    private void onDelete() {
        int row = tblNhanVien.getSelectedRow();
        if (row < 0) {
            MessageDialog.showWarning(this, "Vui lòng chọn nhân viên cần xóa!", "Cảnh báo");
            return;
        }
        String id = (String) tblModel.getValueAt(row, 0);
        boolean confirm = MessageDialog.showConfirm(this, "Bạn có chắc muốn xóa nhân viên " + id + "?", "Xác nhận");
        if (confirm) {
            if (controller.deleteNhanVien(id)) {
                MessageDialog.showInfo(this, "Xóa thành công!", "Thông báo");
                loadDataToTable(); // Chỉ nhân viên chưa xóa mới hiện lên!
            } else {
                MessageDialog.showError(this, "Xóa thất bại!", "Lỗi");
            }
        }
    }


    /**
     * Khi bấm “Làm mới”:
     *  - Ẩn inputPanel nếu đang hiển thị,
     *  - Reload toàn bộ dữ liệu.
     */
    private void onRefresh() {
        hideInputPanel();
        loadDataToTable();
    }

    /**
     * Khi bấm “Lưu” trong inputPanel:
     *  - Validate dữ liệu: IDNV, HoTen, Số điện thoại, Giới tính, Năm sinh, Ngày vào làm, Lương, Trang thái
     *  - Nếu currentMode == "ADDING": gọi controller.addNhanVien(nv),
     *    nếu currentMode == "EDITING": gọi controller.updateNhanVien(nv),
     *  - Ẩn inputPanel và reload bảng nếu thành công.
     */
    private void onSave() {
        String idNV      = txtIdNV.getText().trim();
        String hoTen     = txtHoTen.getText().trim();
        String sdt       = txtSdt.getText().trim();
        String gioiTinh  = txtGioiTinh.getText().trim();
        String namSinhStr = txtNamSinh.getText().trim();
        String ngayVaoLamStr = txtNgayVaoLam.getText().trim();
        String luong     = txtLuong.getText().trim();
        String trangThai = txtTrangThai.getText().trim();
        String username  = txtUsername.getText().trim();
        String password  = txtPassword.getText().trim();

        if (idNV.isEmpty()) {
            MessageDialog.showWarning(this, "IDNV không được để trống!", "Cảnh báo");
            return;
        }
        if (hoTen.isEmpty()) {
            MessageDialog.showWarning(this, "Họ tên không được để trống!", "Cảnh báo");
            return;
        }
        if (!Validator.isPhone(sdt)) {
            MessageDialog.showWarning(this, "SĐT phải là 10–11 chữ số!", "Cảnh báo");
            return;
        }
        if (gioiTinh.isEmpty()) {
            MessageDialog.showWarning(this, "Giới tính không được để trống!", "Cảnh báo");
            return;
        }
        if (!Validator.isInteger(namSinhStr)) {
            MessageDialog.showWarning(this, "Năm sinh phải là số!", "Cảnh báo");
            return;
        }
        if (!Validator.isDate(ngayVaoLamStr, "dd/MM/yyyy")) {
            MessageDialog.showWarning(this, "Ngày vào làm phải đúng định dạng dd/MM/yyyy!", "Cảnh báo");
            return;
        }
        if (luong.isEmpty()) {
            MessageDialog.showWarning(this, "Lương không được để trống!", "Cảnh báo");
            return;
        }
        if (trangThai.isEmpty()) {
            MessageDialog.showWarning(this, "Trạng thái không được để trống!", "Cảnh báo");
            return;
        }
        // Username/Password có thể để trống, DAO sẽ tự xử lý

        NhanVien nv = new NhanVien();
        nv.setIdNV(idNV);
        nv.setHoTen(hoTen);
        nv.setSdt(sdt);
        nv.setGioiTinh(gioiTinh);
        nv.setNamSinh(Integer.parseInt(namSinhStr));
        nv.setNgayVaoLam(DateHelper.toDate(ngayVaoLamStr, "dd/MM/yyyy"));
        nv.setLuong(luong);
        nv.setTrangThai(trangThai);
        nv.setUsername(username);
        nv.setPassword(password);
        nv.setRoleId("VT02"); // giả sử mặc định là nhân viên

        boolean success;
        if (currentMode.equals("ADDING")) {
            success = controller.addNhanVien(nv);
            if (success) {
                MessageDialog.showInfo(this, "Thêm thành công!", "Thông báo");
            } else {
                MessageDialog.showError(this, "Thêm thất bại! Kiểm tra lại IDNV hoặc tài khoản.", "Lỗi");
                return;
            }
        } else { // EDITING
            success = controller.updateNhanVien(nv);
            if (success) {
                MessageDialog.showInfo(this, "Cập nhật thành công!", "Thông báo");
            } else {
                MessageDialog.showError(this, "Cập nhật thất bại! Kiểm tra lại dữ liệu.", "Lỗi");
                return;
            }
        }

        hideInputPanel();
        loadDataToTable();
    }

    /**
     * Khi bấm “Hủy” trong inputPanel:
     *  - Chỉ cần ẩn inputPanel mà không thực hiện lưu hay thay đổi.
     */
    private void onCancel() {
        hideInputPanel();
    }
}

//This is code of: PhanHoiPanel.java
package gui;

import controller.PhanHoiController;
import entities.PhanHoi;
import utils.DateHelper;
import utils.MessageDialog;
import utils.Validator;

import javax.swing.*;
import javax.swing.table.DefaultTableModel;
import java.awt.event.MouseAdapter;
import java.awt.event.MouseEvent;
import java.util.List;
import java.awt.Dimension;
/**
 * PhanHoiPanel.java (đã bổ sung chức năng Tìm kiếm)
 *
 * Bố cục:
 *  - Dòng 1 (y = 10): Nút Thêm, Sửa, Xóa, Làm mới
 *  - Dòng 2 (y = 50): Panel Search (IDPH, IDKH, Nút Tìm kiếm)
 *  - Dòng 3 (y = 90): inputPanel ẩn/chỉ hiển thị khi Add/Edit
 *  - Dòng 4 (y = 200): JTable (cao = 310)
 */
public class PhanHoiPanel extends JPanel {

    private JTable tblPhanHoi;
    private DefaultTableModel tblModel;

    // inputPanel (ẩn khi currentMode == NONE)
    private JPanel inputPanel;
    private JTextField txtIdPH, txtIdKH, txtIdHD, txtIdThuoc, txtNoiDung, txtDanhGia;
    private JFormattedTextField txtThoiGian;
    private JButton btnSave, btnCancel;

    // panel tìm kiếm
    private JTextField txtSearchIdPH, txtSearchIdKH;
    private JButton   btnSearch;

    // nút chức năng
    private JButton btnAdd, btnEdit, btnDelete, btnRefresh;

    private PhanHoiController controller;
    private String currentMode = "NONE"; // "NONE" | "ADDING" | "EDITING"

    public PhanHoiPanel() {
        controller = new PhanHoiController();
        initComponents();
        initSearchPanel();
        initInputPanel(false);
        loadDataToTable();
    }

    /**
     * Khởi tạo các thành phần chính:
     *  - Nút Thêm, Sửa, Xóa, Làm mới (y = 10)
     *  - JTable (y = 200, cao = 310)
     */
    private void initComponents() {
    	//setPreferredSize(new Dimension(1600, 800));
        setLayout(null);

        // --- Nút chức năng (y = 10) --- //
        btnAdd = new JButton("Thêm");
        btnAdd.setBounds(10, 10, 80, 30);
        add(btnAdd);
        btnAdd.addActionListener(e -> onAdd());

        btnEdit = new JButton("Sửa");
        btnEdit.setBounds(100, 10, 80, 30);
        add(btnEdit);
        btnEdit.addActionListener(e -> onEdit());

        btnDelete = new JButton("Xóa");
        btnDelete.setBounds(190, 10, 80, 30);
        add(btnDelete);
        btnDelete.addActionListener(e -> onDelete());

        btnRefresh = new JButton("Làm mới");
        btnRefresh.setBounds(280, 10, 100, 30);
        add(btnRefresh);
        btnRefresh.addActionListener(e -> onRefresh());

        // --- Bảng dữ liệu (y = 200, cao = 310) --- //
        tblModel = new DefaultTableModel();
        tblModel.setColumnIdentifiers(new String[]{
            "IDPH", "IDKH", "IDHD", "IDThuoc", "Nội dung", "Thời gian", "Đánh giá"
        });
        tblPhanHoi = new JTable(tblModel);
        JScrollPane scrollPane = new JScrollPane(tblPhanHoi);
        scrollPane.setBounds(10, 200, 860, 310);
        add(scrollPane);

        tblPhanHoi.addMouseListener(new MouseAdapter() {
            @Override
            public void mouseClicked(MouseEvent e) {
                int row = tblPhanHoi.getSelectedRow();
                if (row >= 0 && currentMode.equals("NONE")) {
                    populateInputFromTable(row);
                }
            }
        });
    }

    /**
     * Khởi tạo panel tìm kiếm (y = 50, cao = 30):
     *  - txtSearchIdPH, txtSearchIdKH, btnSearch
     */
    private void initSearchPanel() {
        JPanel searchPanel = new JPanel(null);
        searchPanel.setBounds(10, 50, 860, 30);
        add(searchPanel);

        JLabel lblSearchIdPH = new JLabel("IDPH:");
        lblSearchIdPH.setBounds(0, 5, 50, 20);
        searchPanel.add(lblSearchIdPH);

        txtSearchIdPH = new JTextField();
        txtSearchIdPH.setBounds(55, 3, 120, 25);
        searchPanel.add(txtSearchIdPH);

        JLabel lblSearchIdKH = new JLabel("IDKH:");
        lblSearchIdKH.setBounds(200, 5, 50, 20);
        searchPanel.add(lblSearchIdKH);

        txtSearchIdKH = new JTextField();
        txtSearchIdKH.setBounds(255, 3, 120, 25);
        searchPanel.add(txtSearchIdKH);

        btnSearch = new JButton("Tìm kiếm");
        btnSearch.setBounds(400, 3, 100, 25);
        searchPanel.add(btnSearch);
        btnSearch.addActionListener(e -> onSearch());
    }

    /**
     * Khởi tạo inputPanel (y = 90, cao = 100), ẩn khi visible = false.
     */
    private void initInputPanel(boolean visible) {
        inputPanel = new JPanel();
        inputPanel.setLayout(null);
        inputPanel.setBounds(10, 90, 860, 100);
        add(inputPanel);

        // IDPH
        JLabel lblIdPH = new JLabel("IDPH:");
        lblIdPH.setBounds(10, 10, 50, 25);
        inputPanel.add(lblIdPH);
        txtIdPH = new JTextField();
        txtIdPH.setBounds(70, 10, 120, 25);
        inputPanel.add(txtIdPH);

        // IDKH
        JLabel lblIdKH = new JLabel("IDKH:");
        lblIdKH.setBounds(220, 10, 50, 25);
        inputPanel.add(lblIdKH);
        txtIdKH = new JTextField();
        txtIdKH.setBounds(280, 10, 100, 25);
        inputPanel.add(txtIdKH);

        // IDHD
        JLabel lblIdHD = new JLabel("IDHD:");
        lblIdHD.setBounds(400, 10, 50, 25);
        inputPanel.add(lblIdHD);
        txtIdHD = new JTextField();
        txtIdHD.setBounds(460, 10, 60, 25);
        inputPanel.add(txtIdHD);

        // IDThuoc
        JLabel lblIdThuoc = new JLabel("IDThuoc:");
        lblIdThuoc.setBounds(618, 10, 60, 25);
        inputPanel.add(lblIdThuoc);
        txtIdThuoc = new JTextField();
        txtIdThuoc.setBounds(670, 10, 100, 25);
        inputPanel.add(txtIdThuoc);

        // Nội dung
        JLabel lblNoiDung = new JLabel("Nội dung:");
        lblNoiDung.setBounds(10, 45, 60, 25);
        inputPanel.add(lblNoiDung);
        txtNoiDung = new JTextField();
        txtNoiDung.setBounds(80, 45, 300, 25);
        inputPanel.add(txtNoiDung);

        // Thời gian
        JLabel lblThoiGian = new JLabel("Thời gian:");
        lblThoiGian.setBounds(400, 45, 70, 25);
        inputPanel.add(lblThoiGian);
        txtThoiGian = new JFormattedTextField();
        txtThoiGian.setBounds(460, 45, 137, 25);
        inputPanel.add(txtThoiGian);

        // Đánh giá
        JLabel lblDanhGia = new JLabel("Đánh giá:");
        lblDanhGia.setBounds(618, 45, 60, 25);
        inputPanel.add(lblDanhGia);
        txtDanhGia = new JTextField();
        txtDanhGia.setBounds(670, 45, 50, 25);
        inputPanel.add(txtDanhGia);

        // Nút Lưu
        btnSave = new JButton("Lưu");
        btnSave.setBounds(800, 10, 60, 30);
        inputPanel.add(btnSave);
        btnSave.addActionListener(e -> onSave());

        // Nút Hủy
        btnCancel = new JButton("Hủy");
        btnCancel.setBounds(800, 50, 60, 30);
        inputPanel.add(btnCancel);
        btnCancel.addActionListener(e -> onCancel());

        inputPanel.setVisible(visible);
    }

    /**
     * Tải toàn bộ dữ liệu vào JTable (khi khởi động hoặc khi làm mới).
     */
    private void loadDataToTable() {
        tblModel.setRowCount(0);
        List<PhanHoi> list = controller.getAllPhanHoi();
        for (PhanHoi ph : list) {
            tblModel.addRow(new Object[]{
                ph.getIdPH(),
                ph.getIdKH(),
                ph.getIdHD(),
                ph.getIdThuoc(),
                ph.getNoiDung(),
                DateHelper.toString(ph.getThoiGian(), "dd/MM/yyyy HH:mm"),
                ph.getDanhGia()
            });
        }
    }

    /**
     * Khi nhấn “Tìm kiếm”: lấy idPH, idKH, gọi controller.searchPhanHoi(...),
     * hiển thị kết quả, nếu có ít nhất 1 dòng, tự động chọn dòng đầu tiên.
     */
    private void onSearch() {
        String idPH = txtSearchIdPH.getText().trim();
        String idKH = txtSearchIdKH.getText().trim();

        List<PhanHoi> results = controller.searchPhanHoi(idPH, idKH);

        tblModel.setRowCount(0);
        for (PhanHoi ph : results) {
            tblModel.addRow(new Object[]{
                ph.getIdPH(),
                ph.getIdKH(),
                ph.getIdHD(),
                ph.getIdThuoc(),
                ph.getNoiDung(),
                DateHelper.toString(ph.getThoiGian(), "dd/MM/yyyy HH:mm"),
                ph.getDanhGia()
            });
        }

        if (!results.isEmpty()) {
            SwingUtilities.invokeLater(() -> {
                tblPhanHoi.setRowSelectionInterval(0, 0);
                tblPhanHoi.scrollRectToVisible(tblPhanHoi.getCellRect(0, 0, true));
            });
        }
    }

    /**
     * Điền dữ liệu từ bảng lên inputPanel (nếu currentMode == NONE).
     */
    private void populateInputFromTable(int row) {
        txtIdPH.setText((String) tblModel.getValueAt(row, 0));
        txtIdKH.setText((String) tblModel.getValueAt(row, 1));
        txtIdHD.setText((String) tblModel.getValueAt(row, 2));
        txtIdThuoc.setText((String) tblModel.getValueAt(row, 3));
        txtNoiDung.setText((String) tblModel.getValueAt(row, 4));
        txtThoiGian.setText((String) tblModel.getValueAt(row, 5));
        txtDanhGia.setText(tblModel.getValueAt(row, 6).toString());
    }

    /**
     * Ẩn inputPanel và reset fields, enable lại phần tìm kiếm, bảng và các nút.
     */
    private void hideInputPanel() {
        txtIdPH.setText("");
        txtIdKH.setText("");
        txtIdHD.setText("");
        txtIdThuoc.setText("");
        txtNoiDung.setText("");
        txtThoiGian.setText("");
        txtDanhGia.setText("");

        inputPanel.setVisible(false);
        currentMode = "NONE";

        btnAdd.setEnabled(true);
        btnEdit.setEnabled(true);
        btnDelete.setEnabled(true);
        btnRefresh.setEnabled(true);
        tblPhanHoi.setEnabled(true);
        btnSearch.setEnabled(true);
        txtSearchIdPH.setEnabled(true);
        txtSearchIdKH.setEnabled(true);
    }

    /**
     * Khi bấm “Thêm”: hiện inputPanel, reset ô, disable các thành phần còn lại.
     */
    private void onAdd() {
        currentMode = "ADDING";
        inputPanel.setVisible(true);

        txtIdPH.setText("");
        txtIdKH.setText("");
        txtIdHD.setText("");
        txtIdThuoc.setText("");
        txtNoiDung.setText("");
        txtThoiGian.setText("");
        txtDanhGia.setText("");

        txtIdPH.setEditable(true);

        btnAdd.setEnabled(false);
        btnEdit.setEnabled(false);
        btnDelete.setEnabled(false);
        btnRefresh.setEnabled(false);
        tblPhanHoi.setEnabled(false);
        btnSearch.setEnabled(false);
        txtSearchIdPH.setEnabled(true);
        txtSearchIdKH.setEnabled(true);
    }

    /**
     * Khi bấm “Sửa”: phải có dòng được chọn, điền dữ liệu vào inputPanel, disable các thành phần khác.
     */
    private void onEdit() {
        int row = tblPhanHoi.getSelectedRow();
        if (row < 0) {
            MessageDialog.showWarning(this, "Vui lòng chọn phản hồi cần sửa!", "Cảnh báo");
            return;
        }
        currentMode = "EDITING";
        inputPanel.setVisible(true);

        populateInputFromTable(row);

        txtIdPH.setEditable(false);

        btnAdd.setEnabled(false);
        btnEdit.setEnabled(false);
        btnDelete.setEnabled(false);
        btnRefresh.setEnabled(false);
        tblPhanHoi.setEnabled(false);
        btnSearch.setEnabled(false);
        txtSearchIdPH.setEnabled(false);
        txtSearchIdKH.setEnabled(false);
    }

    /**
     * Khi bấm “Xóa”: phải có dòng được chọn, xác nhận, gọi controller.deletePhanHoi(idPH).
     */
    private void onDelete() {
        int row = tblPhanHoi.getSelectedRow();
        if (row < 0) {
            MessageDialog.showWarning(this, "Vui lòng chọn phản hồi cần xóa!", "Cảnh báo");
            return;
        }
        String id = (String) tblModel.getValueAt(row, 0);
        boolean confirm = MessageDialog.showConfirm(this, "Bạn có chắc muốn xóa phản hồi " + id + "?", "Xác nhận");
        if (confirm) {
            if (controller.deletePhanHoi(id)) {
                MessageDialog.showInfo(this, "Xóa thành công!", "Thông báo");
                loadDataToTable();
            } else {
                MessageDialog.showError(this, "Xóa thất bại!", "Lỗi");
            }
        }
    }


    /**
     * Khi bấm “Làm mới”: ẩn inputPanel (nếu đang hiển thị) và load lại danh sách.
     */
    private void onRefresh() {
        hideInputPanel();
        loadDataToTable();
    }

    /**
     * Khi bấm “Lưu” trong inputPanel:
     *  - validate dữ liệu,
     *  - nếu ADDING, gọi addPhanHoi,
     *    nếu EDITING, gọi updatePhanHoi,
     *  - ẩn inputPanel, load lại dữ liệu.
     */
    private void onSave() {
        if (!Validator.isDate(txtThoiGian.getText(), "dd/MM/yyyy HH:mm")) {
            MessageDialog.showWarning(this, "Thời gian phải đúng định dạng dd/MM/yyyy HH:mm", "Cảnh báo");
            return;
        }
        if (!Validator.isInteger(txtDanhGia.getText())) {
            MessageDialog.showWarning(this, "Đánh giá phải là số nguyên", "Cảnh báo");
            return;
        }
        PhanHoi ph = new PhanHoi();
        ph.setIdPH(txtIdPH.getText().trim());
        ph.setIdKH(txtIdKH.getText().trim());
        ph.setIdHD(txtIdHD.getText().trim());
        ph.setIdThuoc(txtIdThuoc.getText().trim());
        ph.setNoiDung(txtNoiDung.getText().trim());
        ph.setThoiGian(DateHelper.toDate(txtThoiGian.getText().trim(), "dd/MM/yyyy HH:mm"));
        ph.setDanhGia(Integer.parseInt(txtDanhGia.getText().trim()));

        boolean success;
        if (currentMode.equals("ADDING")) {
            success = controller.addPhanHoi(ph);
            if (success) {
                MessageDialog.showInfo(this, "Thêm thành công!", "Thông báo");
            } else {
                MessageDialog.showError(this, "Thêm thất bại!", "Lỗi");
                return;
            }
        } else { // EDITING
            success = controller.updatePhanHoi(ph);
            if (success) {
                MessageDialog.showInfo(this, "Cập nhật thành công!", "Thông báo");
            } else {
                MessageDialog.showError(this, "Cập nhật thất bại!", "Lỗi");
                return;
            }
        }

        hideInputPanel();
        loadDataToTable();
    }

    /**
     * Khi bấm “Hủy” trong inputPanel: chỉ cần ẩn inputPanel.
     */
    private void onCancel() {
        hideInputPanel();
    }
}

//This is code of: PhieuNhapPanel.java
package gui;

import controller.PhieuNhapController;
import entities.PhieuNhap;
import utils.DateHelper;
import utils.MessageDialog;
import utils.Validator;

import javax.swing.*;
import javax.swing.table.DefaultTableModel;
import java.awt.event.MouseAdapter;
import java.awt.event.MouseEvent;
import java.util.List;
import java.awt.Dimension;
/**
 * PhieuNhapPanel.java
 *
 * Đã chỉnh:
 * 1. Cột "Tổng tiền" hiển thị dưới dạng String.format("%.1f", value) để không bị chuyển thành dạng khoa học (E).
 * 2. Thêm nút "Xem chi tiết" cạnh nút "Xóa". Khi bấm, sẽ mở dialog chi tiết (ViewChiTietPNDialog).
 */
public class PhieuNhapPanel extends JPanel {

    private JTable tblPhieuNhap;
    private DefaultTableModel tblModel;

    // Panel nhập liệu ẩn/hiện khi ADD/EDIT
    private JPanel inputPanel;
    private JTextField txtIdPN, txtThoiGian, txtIdNV, txtIdNCC, txtTongTien;
    private JButton btnSave, btnCancel;

    // Panel tìm kiếm
    private JTextField txtSearchIdPN, txtSearchIdNV, txtSearchIdNCC;
    private JButton btnSearch;

    // 5 nút chức năng: Thêm, Sửa, Xóa, Xem chi tiết, Làm mới
    private JButton btnAdd, btnEdit, btnDelete, btnViewDetail, btnRefresh;

    private PhieuNhapController controller;
    private String currentMode = "NONE"; // "NONE" | "ADDING" | "EDITING"

    public PhieuNhapPanel() {
        controller = new PhieuNhapController();
        initComponents();
        initSearchPanel();
        initInputPanel(false);
        loadDataToTable();
    }

    /**
     * Khởi tạo các thành phần chính:
     *  - Nút Thêm, Sửa, Xóa, Xem chi tiết, Làm mới (y = 10)
     *  - JTable (y = 200, cao = 310) hiển thị 5 cột: IDPN, Thời gian, IDNV, IDNCC, Tổng tiền (định dạng chuẩn)
     */
    private void initComponents() {
    	setPreferredSize(new Dimension(1600, 1200));
        setLayout(null);

        // --- Nút chức năng (y = 10) --- //
        btnAdd = new JButton("Thêm");
        btnAdd.setBounds(10, 10, 80, 30);
        add(btnAdd);
        btnAdd.addActionListener(e -> onAdd());

        btnEdit = new JButton("Sửa");
        btnEdit.setBounds(100, 10, 80, 30);
        add(btnEdit);
        btnEdit.addActionListener(e -> onEdit());

        btnDelete = new JButton("Xóa");
        btnDelete.setBounds(190, 10, 80, 30);
        add(btnDelete);
        btnDelete.addActionListener(e -> onDelete());

        // **Nút "Xem chi tiết" (mới)**
        btnViewDetail = new JButton("Xem chi tiết");
        btnViewDetail.setBounds(280, 10, 110, 30);
        add(btnViewDetail);
        btnViewDetail.addActionListener(e -> onViewDetail());

        btnRefresh = new JButton("Làm mới");
        btnRefresh.setBounds(400, 10, 100, 30);
        add(btnRefresh);
        btnRefresh.addActionListener(e -> onRefresh());

        // --- Bảng dữ liệu (y = 200, cao = 310) --- //
        tblModel = new DefaultTableModel();
        tblModel.setColumnIdentifiers(new String[]{
            "IDPN", "Thời gian", "IDNV", "IDNCC", "Tổng tiền"
        });
        tblPhieuNhap = new JTable(tblModel);
        JScrollPane scrollPane = new JScrollPane(tblPhieuNhap);
        scrollPane.setBounds(10, 200, 860, 310);
        add(scrollPane);

        tblPhieuNhap.addMouseListener(new MouseAdapter() {
            @Override
            public void mouseClicked(MouseEvent e) {
                int row = tblPhieuNhap.getSelectedRow();
                if (row >= 0 && currentMode.equals("NONE")) {
                    populateInputFromTable(row);
                }
            }
        });
    }

    /**
     * Khởi tạo panel tìm kiếm (y = 50, cao = 30):
     *  - txtSearchIdPN, txtSearchIdNV, txtSearchIdNCC, btnSearch
     */
    private void initSearchPanel() {
        JPanel searchPanel = new JPanel(null);
        searchPanel.setBounds(10, 50, 860, 30);
        add(searchPanel);

        JLabel lblSearchIdPN = new JLabel("IDPN:");
        lblSearchIdPN.setBounds(0, 5, 50, 20);
        searchPanel.add(lblSearchIdPN);

        txtSearchIdPN = new JTextField();
        txtSearchIdPN.setBounds(55, 3, 120, 25);
        searchPanel.add(txtSearchIdPN);

        JLabel lblSearchIdNV = new JLabel("IDNV:");
        lblSearchIdNV.setBounds(200, 5, 50, 20);
        searchPanel.add(lblSearchIdNV);

        txtSearchIdNV = new JTextField();
        txtSearchIdNV.setBounds(255, 3, 120, 25);
        searchPanel.add(txtSearchIdNV);

        JLabel lblSearchIdNCC = new JLabel("IDNCC:");
        lblSearchIdNCC.setBounds(400, 5, 50, 20);
        searchPanel.add(lblSearchIdNCC);

        txtSearchIdNCC = new JTextField();
        txtSearchIdNCC.setBounds(455, 3, 120, 25);
        searchPanel.add(txtSearchIdNCC);

        btnSearch = new JButton("Tìm kiếm");
        btnSearch.setBounds(600, 3, 100, 25);
        searchPanel.add(btnSearch);
        btnSearch.addActionListener(e -> onSearch());
    }

    /**
     * Khởi tạo inputPanel (y = 90, cao = 100), ẩn khi visible = false.
     * Gồm các ô: IDPN, ThoiGian, IDNV, IDNCC, TongTien
     * và 2 nút Lưu, Hủy.
     */
    private void initInputPanel(boolean visible) {
        inputPanel = new JPanel(null);
        inputPanel.setBounds(10, 90, 860, 100);
        add(inputPanel);

        // IDPN
        JLabel lblIdPN = new JLabel("IDPN:");
        lblIdPN.setBounds(10, 10, 50, 25);
        inputPanel.add(lblIdPN);
        txtIdPN = new JTextField();
        txtIdPN.setBounds(70, 10, 100, 25);
        inputPanel.add(txtIdPN);

        // Thời gian
        JLabel lblThoiGian = new JLabel("Thời gian:");
        lblThoiGian.setBounds(200, 10, 70, 25);
        inputPanel.add(lblThoiGian);
        txtThoiGian = new JTextField();
        txtThoiGian.setBounds(280, 10, 100, 25);
        inputPanel.add(txtThoiGian);

        // IDNV
        JLabel lblIdNV = new JLabel("IDNV:");
        lblIdNV.setBounds(210, 40, 40, 25);
        inputPanel.add(lblIdNV);
        txtIdNV = new JTextField();
        txtIdNV.setBounds(280, 40, 100, 25);
        inputPanel.add(txtIdNV);

        // IDNCC
        JLabel lblIdNCC = new JLabel("IDNCC:");
        lblIdNCC.setBounds(444, 10, 50, 25);
        inputPanel.add(lblIdNCC);
        txtIdNCC = new JTextField();
        txtIdNCC.setBounds(487, 10, 100, 25);
        inputPanel.add(txtIdNCC);

        // Tổng tiền
        JLabel lblTongTien = new JLabel("Tổng tiền:");
        lblTongTien.setBounds(10, 40, 70, 25);
        inputPanel.add(lblTongTien);
        txtTongTien = new JTextField();
        txtTongTien.setBounds(70, 40, 100, 25);
        inputPanel.add(txtTongTien);

        // Nút Lưu
        btnSave = new JButton("Lưu");
        btnSave.setBounds(800, 10, 60, 30);
        inputPanel.add(btnSave);
        btnSave.addActionListener(e -> onSave());

        // Nút Hủy
        btnCancel = new JButton("Hủy");
        btnCancel.setBounds(800, 50, 60, 30);
        inputPanel.add(btnCancel);
        btnCancel.addActionListener(e -> onCancel());

        inputPanel.setVisible(visible);
    }

    /**
     * Load dữ liệu PhieuNhap vào JTable, gồm 5 cột:
     *  IDPN, Thời gian, IDNV, IDNCC, Tổng tiền (đã formatted).
     */
    private void loadDataToTable() {
        tblModel.setRowCount(0);
        List<PhieuNhap> list = controller.getAllPhieuNhap();
        for (PhieuNhap pn : list) {
            tblModel.addRow(new Object[]{
                pn.getIdPN(),
                DateHelper.toString(pn.getThoiGian(), "dd/MM/yyyy HH:mm"),
                pn.getIdNV(),
                pn.getIdNCC(),
                // Hiển thị Tổng tiền ở dạng 123000.0, không để E
                String.format("%.1f", pn.getTongTien())
            });
        }
    }

    /**
     * Khi nhấn “Tìm kiếm”: lấy idPN, idNV, idNCC, gọi controller.searchPhieuNhap(...),
     * hiển thị kết quả lên table, chọn tự động dòng đầu tiên nếu có.
     */
    private void onSearch() {
        String idPN = txtSearchIdPN.getText().trim();
        String idNV = txtSearchIdNV.getText().trim();
        String idNCC = txtSearchIdNCC.getText().trim();

        List<PhieuNhap> results = controller.searchPhieuNhap(idPN, idNV, idNCC);

        tblModel.setRowCount(0);
        for (PhieuNhap pn : results) {
            tblModel.addRow(new Object[]{
                pn.getIdPN(),
                DateHelper.toString(pn.getThoiGian(), "dd/MM/yyyy HH:mm"),
                pn.getIdNV(),
                pn.getIdNCC(),
                String.format("%.1f", pn.getTongTien())
            });
        }

        if (!results.isEmpty()) {
            SwingUtilities.invokeLater(() -> {
                tblPhieuNhap.setRowSelectionInterval(0, 0);
                tblPhieuNhap.scrollRectToVisible(tblPhieuNhap.getCellRect(0, 0, true));
            });
        }
    }

    /**
     * Điền dữ liệu từ hàng bảng lên inputPanel (nếu currentMode == "NONE").
     */
    private void populateInputFromTable(int row) {
        txtIdPN.setText((String) tblModel.getValueAt(row, 0));
        txtThoiGian.setText((String) tblModel.getValueAt(row, 1));
        txtIdNV.setText((String) tblModel.getValueAt(row, 2));
        txtIdNCC.setText((String) tblModel.getValueAt(row, 3));
        txtTongTien.setText((String) tblModel.getValueAt(row, 4));
    }

    /**
     * Ẩn inputPanel và reset các ô, đồng thời enable lại các thành phần khác.
     */
    private void hideInputPanel() {
        txtIdPN.setText("");
        txtThoiGian.setText("");
        txtIdNV.setText("");
        txtIdNCC.setText("");
        txtTongTien.setText("");

        inputPanel.setVisible(false);
        currentMode = "NONE";

        btnAdd.setEnabled(true);
        btnEdit.setEnabled(true);
        btnDelete.setEnabled(true);
        btnViewDetail.setEnabled(true);
        btnRefresh.setEnabled(true);
        tblPhieuNhap.setEnabled(true);
        btnSearch.setEnabled(true);
        txtSearchIdPN.setEnabled(true);
        txtSearchIdNV.setEnabled(true);
        txtSearchIdNCC.setEnabled(true);
    }

    // ========================================
    // ========== Các phương thức xử lý ========
    // ========================================

    /**
     * Khi bấm “Thêm”:
     *  - Hiện inputPanel (rỗng),
     *  - Disable các thành phần khác,
     *  - currentMode = "ADDING".
     */
    private void onAdd() {
        currentMode = "ADDING";
        inputPanel.setVisible(true);

        txtIdPN.setText("");
        txtThoiGian.setText("");
        txtIdNV.setText("");
        txtIdNCC.setText("");
        txtTongTien.setText("");

        txtIdPN.setEditable(true);

        btnAdd.setEnabled(false);
        btnEdit.setEnabled(false);
        btnDelete.setEnabled(false);
        btnViewDetail.setEnabled(false);
        btnRefresh.setEnabled(false);
        tblPhieuNhap.setEnabled(false);
        btnSearch.setEnabled(false);
        txtSearchIdPN.setEnabled(false);
        txtSearchIdNV.setEnabled(false);
        txtSearchIdNCC.setEnabled(false);
    }

    /**
     * Khi bấm “Sửa”:
     *  - Phải có dòng được chọn,
     *  - Điền dữ liệu lên inputPanel,
     *  - Disable các thành phần khác,
     *  - currentMode = "EDITING".
     */
    private void onEdit() {
        int row = tblPhieuNhap.getSelectedRow();
        if (row < 0) {
            MessageDialog.showWarning(this, "Vui lòng chọn phiếu nhập cần sửa!", "Cảnh báo");
            return;
        }
        currentMode = "EDITING";
        inputPanel.setVisible(true);

        populateInputFromTable(row);

        txtIdPN.setEditable(false);

        btnAdd.setEnabled(false);
        btnEdit.setEnabled(false);
        btnDelete.setEnabled(false);
        btnViewDetail.setEnabled(false);
        btnRefresh.setEnabled(false);
        tblPhieuNhap.setEnabled(false);
        btnSearch.setEnabled(false);
        txtSearchIdPN.setEnabled(false);
        txtSearchIdNV.setEnabled(false);
        txtSearchIdNCC.setEnabled(false);
    }

    /**
     * Khi bấm “Xóa”:
     *  - Phải có dòng được chọn,
     *  - Xác nhận trước khi xóa,
     *  - Gọi controller.deletePhieuNhap(idPN), nếu thành công reload bảng.
     */
    private void onDelete() {
        int row = tblPhieuNhap.getSelectedRow();
        if (row < 0) {
            MessageDialog.showWarning(this, "Vui lòng chọn phiếu nhập cần xóa!", "Cảnh báo");
            return;
        }
        String idPN = (String) tblModel.getValueAt(row, 0);
        boolean confirm = MessageDialog.showConfirm(this,
                "Bạn có chắc muốn xóa Phiếu nhập " + idPN + "?", "Xác nhận");
        if (confirm) {
            if (controller.deletePhieuNhap(idPN)) {
                MessageDialog.showInfo(this, "Xóa thành công!", "Thông báo");
                loadDataToTable();
            } else {
                MessageDialog.showError(this, "Xóa thất bại!", "Lỗi");
            }
        }
    }

    /**
     * Khi bấm “Xem chi tiết”:
     *  - Phải có dòng được chọn,
     *  - Lấy idPN, mở dialog ViewChiTietPNDialog để hiển thị chi tiết.
     */
    private void onViewDetail() {
        int row = tblPhieuNhap.getSelectedRow();
        if (row < 0) {
            MessageDialog.showWarning(this, "Vui lòng chọn phiếu nhập để xem chi tiết!", "Cảnh báo");
            return;
        }
        String idPN = (String) tblModel.getValueAt(row, 0);
        // Mở dialog chi tiết
        ViewChiTietPNDialog dialog = new ViewChiTietPNDialog(SwingUtilities.getWindowAncestor(this), idPN);
        dialog.setVisible(true);
    }

    /**
     * Khi bấm “Làm mới”:
     *  - Ẩn inputPanel nếu đang hiển thị,
     *  - Reload lại dữ liệu bảng.
     */
    private void onRefresh() {
        hideInputPanel();
        loadDataToTable();
    }

    /**
     * Khi bấm “Lưu” trong inputPanel:
     *  - Validate: IDPN, Thời gian, IDNV, IDNCC, Tổng tiền (phải đúng kiểu).
     *  - Nếu currentMode == "ADDING": gọi controller.addPhieuNhap(pn)
     *    Nếu currentMode == "EDITING": gọi controller.updatePhieuNhap(pn)
     *  - Ẩn inputPanel và reload bảng nếu thành công.
     */
    private void onSave() {
        String idPN = txtIdPN.getText().trim();
        String thoiGianStr = txtThoiGian.getText().trim();
        String idNV = txtIdNV.getText().trim();
        String idNCC = txtIdNCC.getText().trim();
        String tongTienStr = txtTongTien.getText().trim();

        if (idPN.isEmpty()) {
            MessageDialog.showWarning(this, "IDPN không được để trống!", "Cảnh báo");
            return;
        }
        if (!Validator.isDateTime(thoiGianStr, "dd/MM/yyyy HH:mm")) {
            MessageDialog.showWarning(this, "Thời gian phải đúng định dạng dd/MM/yyyy HH:mm!", "Cảnh báo");
            return;
        }
        if (idNV.isEmpty()) {
            MessageDialog.showWarning(this, "IDNV không được để trống!", "Cảnh báo");
            return;
        }
        if (idNCC.isEmpty()) {
            MessageDialog.showWarning(this, "IDNCC không được để trống!", "Cảnh báo");
            return;
        }
        if (!Validator.isDouble(tongTienStr)) {
            MessageDialog.showWarning(this, "Tổng tiền phải là số!", "Cảnh báo");
            return;
        }

        PhieuNhap pn = new PhieuNhap();
        pn.setIdPN(idPN);
        pn.setThoiGian(DateHelper.toDateTime(thoiGianStr, "dd/MM/yyyy HH:mm"));
        pn.setIdNV(idNV);
        pn.setIdNCC(idNCC);
        pn.setTongTien(Double.parseDouble(tongTienStr));

        boolean success;
        if (currentMode.equals("ADDING")) {
            success = controller.addPhieuNhap(pn);
            if (success) {
                MessageDialog.showInfo(this, "Thêm thành công!", "Thông báo");
            } else {
                MessageDialog.showError(this, "Thêm thất bại! Kiểm tra IDPN hoặc kết nối DB.", "Lỗi");
                return;
            }
        } else { // EDITING
            success = controller.updatePhieuNhap(pn);
            if (success) {
                MessageDialog.showInfo(this, "Cập nhật thành công!", "Thông báo");
            } else {
                MessageDialog.showError(this, "Cập nhật thất bại! Kiểm tra lại dữ liệu.", "Lỗi");
                return;
            }
        }

        hideInputPanel();
        loadDataToTable();
    }

    /**
     * Khi bấm “Hủy” trong inputPanel:
     *  - Chỉ cần ẩn inputPanel, không lưu.
     */
    private void onCancel() {
        hideInputPanel();
    }
}

//This is code of: ThuocPanel.java
package gui;

import controller.ThuocController;
import entities.Thuoc;
import utils.DateHelper;
import utils.MessageDialog;
import utils.Validator;

import javax.swing.*;
import javax.swing.table.DefaultTableModel;
import java.awt.event.MouseAdapter;
import java.awt.event.MouseEvent;
import java.util.List;
import java.awt.Dimension;
/**
 * ThuocPanel.java (đã sửa để hiển thị trực tiếp các trường donViTinh, danhMuc, xuatXu)
 *
 * Bố cục:
 *  - Dòng 1 (y = 10): Nút Thêm, Sửa, Xóa, Làm mới
 *  - Dòng 2 (y = 50): Panel Search (IDThuoc, Tên thuốc, Nút Tìm kiếm)
 *  - Dòng 3 (y = 90): inputPanel ẩn khi không thao tác Add/Edit
 *  - Dòng 4 (y = 200): JTable (cao = 310) hiển thị danh sách
 */
public class ThuocPanel extends JPanel {

    private JTable tblThuoc;
    private DefaultTableModel tblModel;

    // inputPanel (ẩn khi currentMode = "NONE")
    private JPanel inputPanel;
    private JTextField txtIdThuoc, txtTenThuoc, txtThanhPhan, txtDonViTinh, txtDanhMuc, txtXuatXu,
                       txtSoLuongTon, txtGiaNhap, txtDonGia, txtHanSuDung;
    private JButton btnSave, btnCancel;

    // panel tìm kiếm
    private JTextField txtSearchIdThuoc, txtSearchTenThuoc;
    private JButton btnSearch;

    // 4 nút chức năng
    private JButton btnAdd, btnEdit, btnDelete, btnRefresh;

    private ThuocController controller;
    private String currentMode = "NONE"; // "NONE" | "ADDING" | "EDITING"

    public ThuocPanel() {
        controller = new ThuocController();
        initComponents();
        initSearchPanel();
        initInputPanel(false);
        loadDataToTable();
    }

    /**
     * Khởi tạo các thành phần chính:
     *  - Nút Thêm, Sửa, Xóa, Làm mới (y = 10)
     *  - JTable (y = 200, cao = 310)
     */
    private void initComponents() {
    	setPreferredSize(new Dimension(1600, 800));
        setLayout(null);

        // --- Nút Thêm ---
        btnAdd = new JButton("Thêm");
        btnAdd.setBounds(10, 10, 80, 30);
        add(btnAdd);
        btnAdd.addActionListener(e -> onAdd());

        // --- Nút Sửa ---
        btnEdit = new JButton("Sửa");
        btnEdit.setBounds(100, 10, 80, 30);
        add(btnEdit);
        btnEdit.addActionListener(e -> onEdit());

        // --- Nút Xóa ---
        btnDelete = new JButton("Xóa");
        btnDelete.setBounds(190, 10, 80, 30);
        add(btnDelete);
        btnDelete.addActionListener(e -> onDelete());

        // --- Nút Làm mới ---
        btnRefresh = new JButton("Làm mới");
        btnRefresh.setBounds(280, 10, 100, 30);
        add(btnRefresh);
        btnRefresh.addActionListener(e -> onRefresh());

        // --- Bảng dữ liệu (y = 200, cao = 310) ---
        tblModel = new DefaultTableModel();
        tblModel.setColumnIdentifiers(new String[]{
            "IDThuoc", "Tên thuốc", "Thành phần",
            "Đơn vị tính", "Danh mục", "Xuất xứ",
            "SL tồn", "Giá nhập", "Đơn giá", "Hạn sử dụng"
        });
        tblThuoc = new JTable(tblModel);
        JScrollPane scrollPane = new JScrollPane(tblThuoc);
        scrollPane.setBounds(10, 200, 860, 310);
        add(scrollPane);

        tblThuoc.addMouseListener(new MouseAdapter() {
            @Override
            public void mouseClicked(MouseEvent e) {
                int row = tblThuoc.getSelectedRow();
                if (row >= 0 && currentMode.equals("NONE")) {
                    populateInputFromTable(row);
                }
            }
        });
    }

    /**
     * Khởi tạo panel tìm kiếm (y = 50, cao = 30):
     *  - txtSearchIdThuoc, txtSearchTenThuoc, btnSearch
     */
    private void initSearchPanel() {
        JPanel searchPanel = new JPanel(null);
        searchPanel.setBounds(10, 50, 860, 30);
        add(searchPanel);

        JLabel lblSearchIdThuoc = new JLabel("IDThuoc:");
        lblSearchIdThuoc.setBounds(0, 5, 60, 20);
        searchPanel.add(lblSearchIdThuoc);

        txtSearchIdThuoc = new JTextField();
        txtSearchIdThuoc.setBounds(65, 3, 120, 25);
        searchPanel.add(txtSearchIdThuoc);

        JLabel lblSearchTenThuoc = new JLabel("Tên thuốc:");
        lblSearchTenThuoc.setBounds(200, 5, 70, 20);
        searchPanel.add(lblSearchTenThuoc);

        txtSearchTenThuoc = new JTextField();
        txtSearchTenThuoc.setBounds(275, 3, 150, 25);
        searchPanel.add(txtSearchTenThuoc);

        btnSearch = new JButton("Tìm kiếm");
        btnSearch.setBounds(450, 3, 100, 25);
        searchPanel.add(btnSearch);
        btnSearch.addActionListener(e -> onSearch());
    }

    /**
     * Khởi tạo inputPanel (y = 90, cao = 100), ẩn khi visible = false.
     * Gồm các ô:
     *  - IDThuoc, TenThuoc, ThanhPhan, DonViTinh, DanhMuc, XuatXu,
     *    SoLuongTon, GiaNhap, DonGia, HanSuDung,
     *  - Nút Lưu, Nút Hủy.
     */
    private void initInputPanel(boolean visible) {
        inputPanel = new JPanel(null);
        inputPanel.setBounds(10, 90, 860, 100);
        add(inputPanel);

        // IDThuoc
        JLabel lblIdThuoc = new JLabel("IDThuoc:");
        lblIdThuoc.setBounds(10, 0, 60, 25);
        inputPanel.add(lblIdThuoc);
        txtIdThuoc = new JTextField();
        txtIdThuoc.setBounds(65, 0, 100, 25);
        inputPanel.add(txtIdThuoc);

        // Tên thuốc
        JLabel lblTenThuoc = new JLabel("Tên thuốc:");
        lblTenThuoc.setBounds(180, 0, 70, 25);
        inputPanel.add(lblTenThuoc);
        txtTenThuoc = new JTextField();
        txtTenThuoc.setBounds(265, 0, 200, 25);
        inputPanel.add(txtTenThuoc);

        // Thành phần
        JLabel lblThanhPhan = new JLabel("Thành phần:");
        lblThanhPhan.setBounds(395, 35, 80, 25);
        inputPanel.add(lblThanhPhan);
        txtThanhPhan = new JTextField();
        txtThanhPhan.setBounds(483, 35, 250, 25);
        inputPanel.add(txtThanhPhan);

        // DonViTinh
        JLabel lblDonViTinh = new JLabel("ĐVT:");
        lblDonViTinh.setBounds(10, 35, 50, 25);
        inputPanel.add(lblDonViTinh);
        txtDonViTinh = new JTextField();
        txtDonViTinh.setBounds(65, 35, 100, 25);
        inputPanel.add(txtDonViTinh);

        // DanhMuc
        JLabel lblDanhMuc = new JLabel("DM:");
        lblDanhMuc.setBounds(180, 35, 40, 25);
        inputPanel.add(lblDanhMuc);
        txtDanhMuc = new JTextField();
        txtDanhMuc.setBounds(265, 35, 100, 25);
        inputPanel.add(txtDanhMuc);

        // XuatXu
        JLabel lblXuatXu = new JLabel("Xuất xứ:");
        lblXuatXu.setBounds(384, 70, 60, 25);
        inputPanel.add(lblXuatXu);
        txtXuatXu = new JTextField();
        txtXuatXu.setBounds(460, 70, 100, 25);
        inputPanel.add(txtXuatXu);

        // Số lượng tồn
        JLabel lblSoLuongTon = new JLabel("SL tồn:");
        lblSoLuongTon.setBounds(473, 0, 50, 25);
        inputPanel.add(lblSoLuongTon);
        txtSoLuongTon = new JTextField();
        txtSoLuongTon.setBounds(517, 0, 80, 25);
        inputPanel.add(txtSoLuongTon);

        // Giá nhập
        JLabel lblGiaNhap = new JLabel("Giá nhập:");
        lblGiaNhap.setBounds(568, 70, 60, 25);
        inputPanel.add(lblGiaNhap);
        txtGiaNhap = new JTextField();
        txtGiaNhap.setBounds(643, 70, 90, 25);
        inputPanel.add(txtGiaNhap);

        // Đơn giá
        JLabel lblDonGia = new JLabel("Đơn giá:");
        lblDonGia.setBounds(10, 70, 60, 25);
        inputPanel.add(lblDonGia);
        txtDonGia = new JTextField();
        txtDonGia.setBounds(65, 70, 100, 25);
        inputPanel.add(txtDonGia);

        // Hạn sử dụng
        JLabel lblHanSuDung = new JLabel("Hạn sử dụng:");
        lblHanSuDung.setBounds(180, 70, 80, 25);
        inputPanel.add(lblHanSuDung);
        txtHanSuDung = new JTextField();
        txtHanSuDung.setBounds(264, 70, 100, 25);
        inputPanel.add(txtHanSuDung);

        // Nút Lưu
        btnSave = new JButton("Lưu");
        btnSave.setBounds(800, 10, 60, 30);
        inputPanel.add(btnSave);
        btnSave.addActionListener(e -> onSave());

        // Nút Hủy
        btnCancel = new JButton("Hủy");
        btnCancel.setBounds(800, 50, 60, 30);
        inputPanel.add(btnCancel);
        btnCancel.addActionListener(e -> onCancel());

        inputPanel.setVisible(visible);
    }

    /**
     * Load dữ liệu Thuốc vào JTable:
     *  - Mỗi dòng hiển thị: idThuoc, tenThuoc, thanhPhan,
     *    donViTinh, danhMuc, xuatXu, soLuongTon, giaNhap, donGia, hanSuDung.
     */
    private void loadDataToTable() {
        tblModel.setRowCount(0);
        List<Thuoc> list = controller.getAllThuoc();
        for (Thuoc t : list) {
            tblModel.addRow(new Object[]{
                t.getIdThuoc(),
                t.getTenThuoc(),
                t.getThanhPhan(),
                t.getDonViTinh(),
                t.getDanhMuc(),
                t.getXuatXu(),
                t.getSoLuongTon(),
                t.getGiaNhap(),
                t.getDonGia(),
                DateHelper.toString(t.getHanSuDung(), "dd/MM/yyyy")
            });
        }
    }

    /**
     * Xử lý khi nhấn “Tìm kiếm”:
     *  - Lấy giá trị từ txtSearchIdThuoc, txtSearchTenThuoc,
     *  - Gọi controller.searchThuoc(...),
     *  - Hiển thị kết quả lên table; nếu có dòng, tự động chọn dòng đầu tiên.
     */
    private void onSearch() {
        String idThuoc = txtSearchIdThuoc.getText().trim();
        String tenThuoc = txtSearchTenThuoc.getText().trim();

        List<Thuoc> results = controller.searchThuoc(idThuoc, tenThuoc);

        tblModel.setRowCount(0);
        for (Thuoc t : results) {
            tblModel.addRow(new Object[]{
                t.getIdThuoc(),
                t.getTenThuoc(),
                t.getThanhPhan(),
                t.getDonViTinh(),
                t.getDanhMuc(),
                t.getXuatXu(),
                t.getSoLuongTon(),
                t.getGiaNhap(),
                t.getDonGia(),
                DateHelper.toString(t.getHanSuDung(), "dd/MM/yyyy")
            });
        }

        if (!results.isEmpty()) {
            SwingUtilities.invokeLater(() -> {
                tblThuoc.setRowSelectionInterval(0, 0);
                tblThuoc.scrollRectToVisible(tblThuoc.getCellRect(0, 0, true));
            });
        }
    }

    /**
     * Điền dữ liệu từ hàng bảng lên inputPanel (nếu currentMode == "NONE").
     */
    private void populateInputFromTable(int row) {
        txtIdThuoc.setText((String) tblModel.getValueAt(row, 0));
        txtTenThuoc.setText((String) tblModel.getValueAt(row, 1));
        txtThanhPhan.setText((String) tblModel.getValueAt(row, 2));
        txtDonViTinh.setText((String) tblModel.getValueAt(row, 3));
        txtDanhMuc.setText((String) tblModel.getValueAt(row, 4));
        txtXuatXu.setText((String) tblModel.getValueAt(row, 5));
        txtSoLuongTon.setText(tblModel.getValueAt(row, 6).toString());
        txtGiaNhap.setText(tblModel.getValueAt(row, 7).toString());
        txtDonGia.setText(tblModel.getValueAt(row, 8).toString());
        txtHanSuDung.setText((String) tblModel.getValueAt(row, 9));
    }

    /**
     * Ẩn inputPanel và reset các ô, enable lại các thành phần tìm kiếm và bảng.
     */
    private void hideInputPanel() {
        txtIdThuoc.setText("");
        txtTenThuoc.setText("");
        txtThanhPhan.setText("");
        txtDonViTinh.setText("");
        txtDanhMuc.setText("");
        txtXuatXu.setText("");
        txtSoLuongTon.setText("");
        txtGiaNhap.setText("");
        txtDonGia.setText("");
        txtHanSuDung.setText("");

        inputPanel.setVisible(false);
        currentMode = "NONE";

        btnAdd.setEnabled(true);
        btnEdit.setEnabled(true);
        btnDelete.setEnabled(true);
        btnRefresh.setEnabled(true);
        tblThuoc.setEnabled(true);
        btnSearch.setEnabled(true);
        txtSearchIdThuoc.setEnabled(true);
        txtSearchTenThuoc.setEnabled(true);
    }

    /**
     * Khi bấm “Thêm”:
     *  - Hiện inputPanel (rỗng),
     *  - Disable các nút khác, bảng và panel tìm kiếm,
     *  - currentMode = "ADDING".
     */
    private void onAdd() {
        currentMode = "ADDING";
        inputPanel.setVisible(true);

        txtIdThuoc.setText("");
        txtTenThuoc.setText("");
        txtThanhPhan.setText("");
        txtDonViTinh.setText("");
        txtDanhMuc.setText("");
        txtXuatXu.setText("");
        txtSoLuongTon.setText("");
        txtGiaNhap.setText("");
        txtDonGia.setText("");
        txtHanSuDung.setText("");

        txtIdThuoc.setEditable(true);

        btnAdd.setEnabled(false);
        btnEdit.setEnabled(false);
        btnDelete.setEnabled(false);
        btnRefresh.setEnabled(false);
        tblThuoc.setEnabled(false);
        btnSearch.setEnabled(false);
        txtSearchIdThuoc.setEnabled(false);
        txtSearchTenThuoc.setEnabled(false);
    }

    /**
     * Khi bấm “Sửa”:
     *  - Phải có hàng được chọn trên bảng,
     *  - Điền dữ liệu lên inputPanel,
     *  - Disable các nút khác, bảng và panel tìm kiếm,
     *  - currentMode = "EDITING".
     */
    private void onEdit() {
        int row = tblThuoc.getSelectedRow();
        if (row < 0) {
            MessageDialog.showWarning(this, "Vui lòng chọn thuốc cần sửa!", "Cảnh báo");
            return;
        }
        currentMode = "EDITING";
        inputPanel.setVisible(true);

        populateInputFromTable(row);

        txtIdThuoc.setEditable(false);

        btnAdd.setEnabled(false);
        btnEdit.setEnabled(false);
        btnDelete.setEnabled(false);
        btnRefresh.setEnabled(false);
        tblThuoc.setEnabled(false);
        btnSearch.setEnabled(false);
        txtSearchIdThuoc.setEnabled(false);
        txtSearchTenThuoc.setEnabled(false);
    }

    /**
     * Khi bấm “Xóa”:
     *  - Phải có hàng được chọn,
     *  - Xác nhận trước khi xóa,
     *  - Gọi controller.deleteThuoc(idThuoc),
     *  - Nếu thành công, load lại table.
     */
   private void onDelete() {
        int row = tblThuoc.getSelectedRow();
        if (row < 0) {
            MessageDialog.showWarning(this, "Vui lòng chọn thuốc cần xóa!", "Cảnh báo");
            return;
        }
        String idThuoc = (String) tblModel.getValueAt(row, 0);
        boolean confirm = MessageDialog.showConfirm(this,
                "Bạn có chắc muốn xóa thuốc " + idThuoc + "?", "Xác nhận");
        if (confirm) {
            StringBuilder errorMessage = new StringBuilder();
            boolean success = controller.deleteThuoc(idThuoc, errorMessage);
            if (success) {
                MessageDialog.showInfo(this, "Xóa thành công!", "Thông báo");
                loadDataToTable();
            } else {
                String msg = errorMessage.length() > 0
                    ? errorMessage.toString()
                    : "Xóa thất bại!";
                MessageDialog.showError(this, msg, "Lỗi");
            }
            }
        }

    /**
     * Khi bấm “Làm mới”:
     *  - Ẩn inputPanel nếu đang hiển thị,
     *  - Load lại toàn bộ dữ liệu.
     */
    private void onRefresh() {
        hideInputPanel();
        loadDataToTable();
    }

    /**
     * Khi bấm “Lưu” trong inputPanel:
     *  - Kiểm tra dữ liệu hợp lệ (ID, Tên, DonViTinh, DanhMuc, XuatXu không rỗng;
     *    Số lượng, giá phải là số; Hạn sử dụng đúng định dạng),
     *  - Nếu currentMode == "ADDING": gọi addThuoc,
     *    nếu currentMode == "EDITING": gọi updateThuoc,
     *  - Ẩn inputPanel, reload table.
     */
    private void onSave() {
        String idThuoc = txtIdThuoc.getText().trim();
        String tenThuoc = txtTenThuoc.getText().trim();
        String thanhPhan = txtThanhPhan.getText().trim();
        String donViTinh = txtDonViTinh.getText().trim();
        String danhMuc = txtDanhMuc.getText().trim();
        String xuatXu = txtXuatXu.getText().trim();
        String soLuongTonStr = txtSoLuongTon.getText().trim();
        String giaNhapStr = txtGiaNhap.getText().trim();
        String donGiaStr = txtDonGia.getText().trim();
        String hanSuDungStr = txtHanSuDung.getText().trim();

        if (idThuoc.isEmpty()) {
            MessageDialog.showWarning(this, "IDThuoc không được để trống!", "Cảnh báo");
            return;
        }
        if (tenThuoc.isEmpty()) {
            MessageDialog.showWarning(this, "Tên thuốc không được để trống!", "Cảnh báo");
            return;
        }
        if (donViTinh.isEmpty()) {
            MessageDialog.showWarning(this, "Đơn vị tính không được để trống!", "Cảnh báo");
            return;
        }
        if (danhMuc.isEmpty()) {
            MessageDialog.showWarning(this, "Danh mục không được để trống!", "Cảnh báo");
            return;
        }
        if (xuatXu.isEmpty()) {
            MessageDialog.showWarning(this, "Xuất xứ không được để trống!", "Cảnh báo");
            return;
        }
        if (!Validator.isInteger(soLuongTonStr)) {
            MessageDialog.showWarning(this, "Số lượng tồn phải là số nguyên!", "Cảnh báo");
            return;
        }
        if (!Validator.isDouble(giaNhapStr)) {
            MessageDialog.showWarning(this, "Giá nhập phải là số!", "Cảnh báo");
            return;
        }
        if (!Validator.isDouble(donGiaStr)) {
            MessageDialog.showWarning(this, "Đơn giá phải là số!", "Cảnh báo");
            return;
        }
        if (!Validator.isDate(hanSuDungStr, "dd/MM/yyyy")) {
            MessageDialog.showWarning(this, "Hạn sử dụng phải đúng định dạng dd/MM/yyyy!", "Cảnh báo");
            return;
        }

        Thuoc t = new Thuoc();
        t.setIdThuoc(idThuoc);
        t.setTenThuoc(tenThuoc);
        t.setThanhPhan(thanhPhan.isEmpty() ? null : thanhPhan);
        t.setDonViTinh(donViTinh);
        t.setDanhMuc(danhMuc);
        t.setXuatXu(xuatXu);
        t.setSoLuongTon(Integer.parseInt(soLuongTonStr));
        t.setGiaNhap(Double.parseDouble(giaNhapStr));
        t.setDonGia(Double.parseDouble(donGiaStr));
        t.setHanSuDung(DateHelper.toDate(hanSuDungStr, "dd/MM/yyyy"));

        boolean success;
        if (currentMode.equals("ADDING")) {
            success = controller.addThuoc(t);
            if (success) {
                MessageDialog.showInfo(this, "Thêm thành công!", "Thông báo");
            } else {
                MessageDialog.showError(this, "Thêm thất bại! Kiểm tra lại IDThuoc hoặc kết nối DB.", "Lỗi");
                return;
            }
        } else { // EDITING
            success = controller.updateThuoc(t);
            if (success) {
                MessageDialog.showInfo(this, "Cập nhật thành công!", "Thông báo");
            } else {
                MessageDialog.showError(this, "Cập nhật thất bại! Kiểm tra lại dữ liệu.", "Lỗi");
                return;
            }
        }

        hideInputPanel();
        loadDataToTable();
    }

    /**
     * Khi bấm “Hủy” trong inputPanel: chỉ cần ẩn inputPanel mà không thay đổi dữ liệu.
     */
    private void onCancel() {
        hideInputPanel();
    }
}
//This is code of: ViewChiTietHDDialog.java
package gui;

import entities.ChiTietHoaDon;
import dao.ChiTietHoaDonDAO;

import javax.swing.*;
import javax.swing.table.DefaultTableModel;
import java.awt.*;
import java.util.List;

/**
 * ViewChiTietHDDialog.java
 *
 * Hiển thị chi tiết Hóa đơn (idHD) trong JDialog dạng bảng.
 * Cột: "Tên Thuốc", "Số lượng", "Đơn giá".
 */
public class ViewChiTietHDDialog extends JDialog {
    private JTable tblChiTiet;
    private DefaultTableModel tblModel;

    /**
     * @param parent Cửa sổ cha (MainFrame hoặc Panel chứa nút Xem chi tiết).
     * @param idHD   Mã hóa đơn cần xem chi tiết.
     */
    public ViewChiTietHDDialog(Window parent, String idHD) {
        super(parent, "Chi tiết Hóa đơn: " + idHD, ModalityType.APPLICATION_MODAL);
        setSize(500, 300);
        setLocationRelativeTo(parent);

        initComponents();
        loadData(idHD);
    }

    /**
     * Khởi tạo giao diện: chỉ có một JTable với 3 cột:
     *   "Tên Thuốc", "Số lượng", "Đơn giá"
     */
    private void initComponents() {
        tblModel = new DefaultTableModel();
        tblModel.setColumnIdentifiers(new String[]{"Tên thuốc", "Số lượng", "Đơn giá"});
        tblChiTiet = new JTable(tblModel);

        JScrollPane scrollPane = new JScrollPane(tblChiTiet);
        scrollPane.setBorder(BorderFactory.createEmptyBorder(10, 10, 10, 10));

        getContentPane().setLayout(new BorderLayout());
        getContentPane().add(scrollPane, BorderLayout.CENTER);
    }

    /**
     * Lấy dữ liệu từ DAO và đổ vào JTable.
     *
     * @param idHD Mã hóa đơn cần lấy chi tiết.
     */
    private void loadData(String idHD) {
        ChiTietHoaDonDAO dao = new ChiTietHoaDonDAO();
        List<ChiTietHoaDon> list = dao.getByIdHD(idHD);
        tblModel.setRowCount(0);

        for (ChiTietHoaDon ct : list) {
            tblModel.addRow(new Object[]{
                ct.getTenThuoc(),
                ct.getSoLuong(),
                // Hiển thị donGia kiểu bình thường, ví dụ 20000.0
                String.format("%.1f", ct.getDonGia())
            });
        }

        if (list.isEmpty()) {
            JOptionPane.showMessageDialog(
                this,
                "Không tìm thấy chi tiết cho Hóa đơn: " + idHD,
                "Thông báo",
                JOptionPane.INFORMATION_MESSAGE
            );
        }
    }
}

//This is code of: ViewChiTietPNDialog.java
package gui;

import entities.ChiTietPhieuNhap;
import dao.ChiTietPhieuNhapDAO;

import javax.swing.*;
import javax.swing.table.DefaultTableModel;
import java.awt.*;
import java.util.List;

/**
 * ViewChiTietPNDialog.java
 *
 * Hiển thị chi tiết Phiếu nhập (idPN) trong JDialog.
 * Bảng giờ sẽ có 3 cột: "Tên thuốc", "Số lượng", "Đơn giá".
 */
public class ViewChiTietPNDialog extends JDialog {
    private JTable tblChiTiet;
    private DefaultTableModel tblModel;

    /**
     * @param parent Cửa sổ cha (MainFrame hoặc Panel)
     * @param idPN   Mã Phiếu nhập cần xem chi tiết
     */
    public ViewChiTietPNDialog(Window parent, String idPN) {
        super(parent, "Chi tiết Phiếu nhập: " + idPN, ModalityType.APPLICATION_MODAL);
        setSize(500, 300);
        setLocationRelativeTo(parent);

        initComponents();
        loadData(idPN);
    }

    /**
     * Khởi tạo giao diện: chỉ chứa JTable với 3 cột:
     *   "Tên thuốc", "Số lượng", "Đơn giá".
     */
    private void initComponents() {
        tblModel = new DefaultTableModel();
        // Đổi tên cột đầu thành "Tên Thuốc"
        tblModel.setColumnIdentifiers(new String[]{"Tên Thuốc", "Số lượng", "Đơn giá"});
        tblChiTiet = new JTable(tblModel);

        JScrollPane scrollPane = new JScrollPane(tblChiTiet);
        scrollPane.setBorder(BorderFactory.createEmptyBorder(10, 10, 10, 10));

        getContentPane().setLayout(new BorderLayout());
        getContentPane().add(scrollPane, BorderLayout.CENTER);
    }

    /**
     * Lấy dữ liệu chi tiết từ DAO và hiển thị vào bảng.
     * DAO giờ trả về danh sách ChiTietPhieuNhap có sẵn tenThuoc.
     */
    private void loadData(String idPN) {
        ChiTietPhieuNhapDAO dao = new ChiTietPhieuNhapDAO();
        List<ChiTietPhieuNhap> list = dao.getByIdPN(idPN);
        tblModel.setRowCount(0);

        for (ChiTietPhieuNhap ct : list) {
            tblModel.addRow(new Object[]{
                ct.getTenThuoc(), 
                ct.getSoLuong(),
                // Hiển thị DonGia với 1 chữ số thập phân (ví dụ 2000.0)
                String.format("%.1f", ct.getDonGia())
            });
        }

        if (list.isEmpty()) {
            JOptionPane.showMessageDialog(
                this,
                "Phiếu nhập " + idPN + " không có chi tiết hoặc không tồn tại!",
                "Thông báo",
                JOptionPane.INFORMATION_MESSAGE
            );
        }
    }
}

