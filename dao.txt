//This is code of: ChiTietHoaDonDAO.java
package dao;

import connectDB.DBConnection;
import connectDB.DBCloseHelper;
import entities.ChiTietHoaDon;

import java.sql.*;
import java.util.ArrayList;
import java.util.List;

/**
 * ChiTietHoaDonDAO.java
 *
 * DAO cho bảng dbo.ChiTietHoaDon, đã sửa để join với bảng Thuoc lấy thêm tên thuốc.
 */
public class ChiTietHoaDonDAO {

    /**
     * Lấy danh sách ChiTietHoaDon (kèm tên thuốc) theo idHD.
     *
     * SQL:
     *   SELECT ct.idHD, ct.idThuoc, t.tenThuoc, ct.soLuong, ct.donGia
     *     FROM ChiTietHoaDon ct
     *     JOIN Thuoc t ON ct.idThuoc = t.idThuoc
     *    WHERE ct.idHD = ?
     *
     * @param idHD Mã hóa đơn cần lấy chi tiết.
     * @return Danh sách ChiTietHoaDon có tenThuoc.
     */
    public List<ChiTietHoaDon> getByIdHD(String idHD) {
        List<ChiTietHoaDon> list = new ArrayList<>();
        String sql = ""
            + "SELECT ct.idHD, ct.idThuoc, t.tenThuoc, ct.soLuong, ct.donGia "
            + "FROM ChiTietHoaDon ct "
            + "JOIN Thuoc t ON ct.idThuoc = t.idThuoc "
            + "WHERE ct.idHD = ?";
        Connection conn = null;
        PreparedStatement stmt = null;
        ResultSet rs = null;
        try {
            conn = DBConnection.getConnection();
            stmt = conn.prepareStatement(sql);
            stmt.setString(1, idHD);
            rs = stmt.executeQuery();
            while (rs.next()) {
                ChiTietHoaDon ct = new ChiTietHoaDon();
                ct.setIdHD(rs.getString("idHD"));
                ct.setIdThuoc(rs.getString("idThuoc"));
                ct.setTenThuoc(rs.getString("tenThuoc")); // Lấy tên thuốc
                ct.setSoLuong(rs.getInt("soLuong"));
                ct.setDonGia(rs.getDouble("donGia"));
                list.add(ct);
            }
        } catch (SQLException e) {
            e.printStackTrace();
        } finally {
            DBCloseHelper.closeAll(rs, stmt, conn);
        }
        return list;
    }
}

//This is code of: ChiTietPhieuNhapDAO.java
package dao;

import connectDB.DBConnection;
import connectDB.DBCloseHelper;
import entities.ChiTietPhieuNhap;

import java.sql.*;
import java.util.ArrayList;
import java.util.List;

/**
 * ChiTietPhieuNhapDAO.java
 *
 * Đã chỉnh sửa truy vấn trong getByIdPN(...) để join với bảng Thuoc
 * và lấy thêm cột tenThuoc (tên thuốc).
 */
public class ChiTietPhieuNhapDAO {

    /**
     * Trả về danh sách ChiTietPhieuNhap (kèm cả tên thuốc) theo idPN.
     * 
     * SELECT ct.idThuoc, t.tenThuoc, ct.soLuong, ct.donGia
     *   FROM ChiTietPhieuNhap ct
     *   JOIN Thuoc t ON ct.idThuoc = t.idThuoc
     *  WHERE ct.idPN = ?
     */
    public List<ChiTietPhieuNhap> getByIdPN(String idPN) {
        List<ChiTietPhieuNhap> list = new ArrayList<>();
        String sql = ""
            + "SELECT ct.idPN, ct.idThuoc, t.tenThuoc, ct.soLuong, ct.donGia "
            + "FROM ChiTietPhieuNhap ct "
            + "JOIN Thuoc t ON ct.idThuoc = t.idThuoc "
            + "WHERE ct.idPN = ?";
        Connection conn = null;
        PreparedStatement stmt = null;
        ResultSet rs = null;

        try {
            conn = DBConnection.getConnection();
            stmt = conn.prepareStatement(sql);
            stmt.setString(1, idPN);
            rs = stmt.executeQuery();

            while (rs.next()) {
                ChiTietPhieuNhap ct = new ChiTietPhieuNhap();
                ct.setIdPN(rs.getString("idPN"));
                ct.setIdThuoc(rs.getString("idThuoc"));
                ct.setTenThuoc(rs.getString("tenThuoc")); // Tên thuốc mới
                ct.setSoLuong(rs.getInt("soLuong"));
                ct.setDonGia(rs.getDouble("donGia"));
                list.add(ct);
            }
        } catch (SQLException e) {
            e.printStackTrace();
        } finally {
            DBCloseHelper.closeAll(rs, stmt, conn);
        }
        return list;
    }
}

//This is code of: HoaDonDAO.java
package dao;

import connectDB.DBConnection;
import connectDB.DBCloseHelper;
import entities.HoaDon;

import java.sql.*;
import java.util.ArrayList;
import java.util.List;

/**
 * HoaDonDAO.java
 *
 * CRUD cho bảng dbo.HoaDon (bổ sung trường phuongThucThanhToan và trangThaiDonHang).
 * ĐÃ SỬA: Trả về lỗi chi tiết khi vi phạm ràng buộc, lỗi SQL cho Controller xử lý.
 */
public class HoaDonDAO {

    /**
     * Lấy toàn bộ danh sách Hóa đơn.
     */
    public List<HoaDon> getAllHoaDon() {
        List<HoaDon> list = new ArrayList<>();
        String sql = "SELECT idHD, thoiGian, idNV, idKH, tongTien, phuongThucThanhToan, trangThaiDonHang FROM HoaDon";
        Connection conn = null;
        Statement stmt = null;
        ResultSet rs = null;
        try {
            conn = DBConnection.getConnection();
            stmt = conn.createStatement();
            rs = stmt.executeQuery(sql);
            while (rs.next()) {
                HoaDon hd = new HoaDon();
                hd.setIdHD(rs.getString("idHD"));
                hd.setThoiGian(rs.getTimestamp("thoiGian"));
                hd.setIdNV(rs.getString("idNV"));
                hd.setIdKH(rs.getString("idKH"));
                hd.setTongTien(rs.getDouble("tongTien"));
                hd.setPhuongThucThanhToan(rs.getString("phuongThucThanhToan"));
                hd.setTrangThaiDonHang(rs.getString("trangThaiDonHang"));
                list.add(hd);
            }
        } catch (SQLException e) {
            e.printStackTrace();
        } finally {
            DBCloseHelper.closeAll(rs, stmt, conn);
        }
        return list;
    }

    /**
     * Thêm mới một Hóa đơn (kèm trường mới).
     * Báo lỗi nếu trùng khóa hoặc thiếu khóa ngoại.
     */
    public boolean insertHoaDon(HoaDon hd) {
        String sql = "INSERT INTO HoaDon (idHD, thoiGian, idNV, idKH, tongTien, phuongThucThanhToan, trangThaiDonHang) VALUES (?, ?, ?, ?, ?, ?, ?)";
        Connection conn = null;
        PreparedStatement stmt = null;
        try {
            conn = DBConnection.getConnection();
            stmt = conn.prepareStatement(sql);
            stmt.setString(1, hd.getIdHD());
            stmt.setTimestamp(2, new java.sql.Timestamp(hd.getThoiGian().getTime()));
            stmt.setString(3, hd.getIdNV());
            stmt.setString(4, hd.getIdKH());
            stmt.setDouble(5, hd.getTongTien());
            if (hd.getPhuongThucThanhToan() != null) {
                stmt.setString(6, hd.getPhuongThucThanhToan());
            } else {
                stmt.setNull(6, Types.NVARCHAR);
            }
            stmt.setString(7, hd.getTrangThaiDonHang());
            int rows = stmt.executeUpdate();
            return rows > 0;
        } catch (SQLException e) {
            if (e.getErrorCode() == 2627) { // Trùng PK
                throw new RuntimeException("ID hóa đơn đã tồn tại!");
            }
            if (e.getErrorCode() == 547) { // FK constraint failed
                throw new RuntimeException("ID nhân viên hoặc khách hàng không tồn tại!");
            }
            e.printStackTrace();
            throw new RuntimeException("Lỗi SQL khi thêm hóa đơn: " + e.getMessage());
        } finally {
            DBCloseHelper.closeAll(stmt, conn);
        }
    }

    /**
     * Cập nhật Hóa đơn (theo idHD).
     */
    public boolean updateHoaDon(HoaDon hd) {
        String sql = "UPDATE HoaDon SET thoiGian=?, idNV=?, idKH=?, tongTien=?, phuongThucThanhToan=?, trangThaiDonHang=? WHERE idHD=?";
        Connection conn = null;
        PreparedStatement stmt = null;
        try {
            conn = DBConnection.getConnection();
            stmt = conn.prepareStatement(sql);
            stmt.setTimestamp(1, new java.sql.Timestamp(hd.getThoiGian().getTime()));
            stmt.setString(2, hd.getIdNV());
            stmt.setString(3, hd.getIdKH());
            stmt.setDouble(4, hd.getTongTien());
            if (hd.getPhuongThucThanhToan() != null) {
                stmt.setString(5, hd.getPhuongThucThanhToan());
            } else {
                stmt.setNull(5, Types.NVARCHAR);
            }
            stmt.setString(6, hd.getTrangThaiDonHang());
            stmt.setString(7, hd.getIdHD());
            int rows = stmt.executeUpdate();
            return rows > 0;
        } catch (SQLException e) {
            if (e.getErrorCode() == 547) {
                throw new RuntimeException("ID nhân viên hoặc khách hàng không tồn tại!");
            }
            e.printStackTrace();
            throw new RuntimeException("Lỗi SQL khi cập nhật hóa đơn: " + e.getMessage());
        } finally {
            DBCloseHelper.closeAll(stmt, conn);
        }
    }

    /**
     * Xóa Hóa đơn theo idHD.
     * Báo lỗi nếu còn chi tiết hóa đơn hoặc phản hồi liên quan.
     */
    public boolean deleteHoaDon(String idHD) {
        String sql = "DELETE FROM HoaDon WHERE idHD = ?";
        Connection conn = null;
        PreparedStatement stmt = null;
        try {
            conn = DBConnection.getConnection();
            stmt = conn.prepareStatement(sql);
            stmt.setString(1, idHD);
            int rows = stmt.executeUpdate();
            return rows > 0;
        } catch (SQLException e) {
            if (e.getErrorCode() == 547) { // FK constraint failed
                throw new RuntimeException("Không thể xóa hóa đơn này vì đã có chi tiết hóa đơn hoặc phản hồi liên quan!");
            }
            e.printStackTrace();
            throw new RuntimeException("Lỗi SQL khi xóa hóa đơn: " + e.getMessage());
        } finally {
            DBCloseHelper.closeAll(stmt, conn);
        }
    }

    /**
     * Tìm kiếm Hóa đơn theo idHD, idNV hoặc idKH.
     * Nếu cả ba tham số đều rỗng, trả về toàn bộ.
     */
    public List<HoaDon> searchHoaDon(String idHD, String idNV, String idKH) {
        List<HoaDon> list = new ArrayList<>();
        StringBuilder sql = new StringBuilder(
            "SELECT idHD, thoiGian, idNV, idKH, tongTien, phuongThucThanhToan, trangThaiDonHang FROM HoaDon WHERE 1=1"
        );
        if (idHD != null && !idHD.trim().isEmpty()) {
            sql.append(" AND idHD LIKE ?");
        }
        if (idNV != null && !idNV.trim().isEmpty()) {
            sql.append(" AND idNV LIKE ?");
        }
        if (idKH != null && !idKH.trim().isEmpty()) {
            sql.append(" AND idKH LIKE ?");
        }

        Connection conn = null;
        PreparedStatement stmt = null;
        ResultSet rs = null;
        try {
            conn = DBConnection.getConnection();
            stmt = conn.prepareStatement(sql.toString());
            int idx = 1;
            if (idHD != null && !idHD.trim().isEmpty()) {
                stmt.setString(idx++, "%" + idHD.trim() + "%");
            }
            if (idNV != null && !idNV.trim().isEmpty()) {
                stmt.setString(idx++, "%" + idNV.trim() + "%");
            }
            if (idKH != null && !idKH.trim().isEmpty()) {
                stmt.setString(idx++, "%" + idKH.trim() + "%");
            }
            rs = stmt.executeQuery();
            while (rs.next()) {
                HoaDon hd = new HoaDon();
                hd.setIdHD(rs.getString("idHD"));
                hd.setThoiGian(rs.getTimestamp("thoiGian"));
                hd.setIdNV(rs.getString("idNV"));
                hd.setIdKH(rs.getString("idKH"));
                hd.setTongTien(rs.getDouble("tongTien"));
                hd.setPhuongThucThanhToan(rs.getString("phuongThucThanhToan"));
                hd.setTrangThaiDonHang(rs.getString("trangThaiDonHang"));
                list.add(hd);
            }
        } catch (SQLException e) {
            e.printStackTrace();
        } finally {
            DBCloseHelper.closeAll(rs, stmt, conn);
        }
        return list;
    }
}

//This is code of: HopDongDAO.java
package dao;

import connectDB.DBConnection;
import connectDB.DBCloseHelper;
import entities.HopDong;

import java.sql.*;
import java.util.ArrayList;
import java.util.List;

public class HopDongDAO {

    // Lấy toàn bộ hợp đồng chưa bị xóa
    public List<HopDong> getAllHopDong() {
        List<HopDong> list = new ArrayList<>();
        String sql = "SELECT idHDong, ngayBatDau, ngayKetThuc, noiDung, idNV, idNCC, trangThai " +
                     "FROM HopDong WHERE (isDeleted IS NULL OR isDeleted = 0)";
        Connection conn = null;
        Statement stmt = null;
        ResultSet rs = null;
        try {
            conn = DBConnection.getConnection();
            stmt = conn.createStatement();
            rs = stmt.executeQuery(sql);
            while (rs.next()) {
                HopDong hd = new HopDong();
                hd.setIdHDong(rs.getString("idHDong"));
                hd.setNgayBatDau(rs.getDate("ngayBatDau"));
                hd.setNgayKetThuc(rs.getDate("ngayKetThuc"));
                hd.setNoiDung(rs.getString("noiDung"));
                hd.setIdNV(rs.getString("idNV"));
                hd.setIdNCC(rs.getString("idNCC"));
                hd.setTrangThai(rs.getString("trangThai"));
                list.add(hd);
            }
        } catch (SQLException e) {
            e.printStackTrace();
        } finally {
            DBCloseHelper.closeAll(rs, stmt, conn);
        }
        return list;
    }

    // Tìm kiếm hợp đồng (chỉ hiện chưa xóa)
    public List<HopDong> searchHopDong(String idHDong, String idNV, String idNCC) {
        List<HopDong> list = new ArrayList<>();
        StringBuilder sql = new StringBuilder(
            "SELECT idHDong, ngayBatDau, ngayKetThuc, noiDung, idNV, idNCC, trangThai " +
            "FROM HopDong WHERE (isDeleted IS NULL OR isDeleted = 0)"
        );
        if (idHDong != null && !idHDong.trim().isEmpty()) {
            sql.append(" AND idHDong LIKE ?");
        }
        if (idNV != null && !idNV.trim().isEmpty()) {
            sql.append(" AND idNV LIKE ?");
        }
        if (idNCC != null && !idNCC.trim().isEmpty()) {
            sql.append(" AND idNCC LIKE ?");
        }

        Connection conn = null;
        PreparedStatement stmt = null;
        ResultSet rs = null;
        try {
            conn = DBConnection.getConnection();
            stmt = conn.prepareStatement(sql.toString());
            int idx = 1;
            if (idHDong != null && !idHDong.trim().isEmpty()) {
                stmt.setString(idx++, "%" + idHDong.trim() + "%");
            }
            if (idNV != null && !idNV.trim().isEmpty()) {
                stmt.setString(idx++, "%" + idNV.trim() + "%");
            }
            if (idNCC != null && !idNCC.trim().isEmpty()) {
                stmt.setString(idx++, "%" + idNCC.trim() + "%");
            }
            rs = stmt.executeQuery();
            while (rs.next()) {
                HopDong hd = new HopDong();
                hd.setIdHDong(rs.getString("idHDong"));
                hd.setNgayBatDau(rs.getDate("ngayBatDau"));
                hd.setNgayKetThuc(rs.getDate("ngayKetThuc"));
                hd.setNoiDung(rs.getString("noiDung"));
                hd.setIdNV(rs.getString("idNV"));
                hd.setIdNCC(rs.getString("idNCC"));
                hd.setTrangThai(rs.getString("trangThai"));
                list.add(hd);
            }
        } catch (SQLException e) {
            e.printStackTrace();
        } finally {
            DBCloseHelper.closeAll(rs, stmt, conn);
        }
        return list;
    }

    // Thêm mới hợp đồng (isDeleted = 0)
    public boolean insertHopDong(HopDong hd) {
        String sql = "INSERT INTO HopDong (idHDong, ngayBatDau, ngayKetThuc, noiDung, idNV, idNCC, trangThai, isDeleted) " +
                     "VALUES (?, ?, ?, ?, ?, ?, ?, 0)";
        Connection conn = null;
        PreparedStatement stmt = null;
        try {
            conn = DBConnection.getConnection();
            stmt = conn.prepareStatement(sql);
            stmt.setString(1, hd.getIdHDong());
            stmt.setDate(2, new java.sql.Date(hd.getNgayBatDau().getTime()));
            stmt.setDate(3, new java.sql.Date(hd.getNgayKetThuc().getTime()));
            if (hd.getNoiDung() != null) {
                stmt.setString(4, hd.getNoiDung());
            } else {
                stmt.setNull(4, Types.NVARCHAR);
            }
            if (hd.getIdNV() != null) {
                stmt.setString(5, hd.getIdNV());
            } else {
                stmt.setNull(5, Types.NVARCHAR);
            }
            if (hd.getIdNCC() != null) {
                stmt.setString(6, hd.getIdNCC());
            } else {
                stmt.setNull(6, Types.NVARCHAR);
            }
            stmt.setString(7, hd.getTrangThai());
            int rows = stmt.executeUpdate();
            return rows > 0;
        } catch (SQLException e) {
            e.printStackTrace();
            return false;
        } finally {
            DBCloseHelper.closeAll(stmt, conn);
        }
    }

    // Cập nhật hợp đồng (không đổi isDeleted)
    public boolean updateHopDong(HopDong hd) {
        String sql = "UPDATE HopDong SET ngayBatDau = ?, ngayKetThuc = ?, noiDung = ?, idNV = ?, idNCC = ?, trangThai = ? WHERE idHDong = ?";
        Connection conn = null;
        PreparedStatement stmt = null;
        try {
            conn = DBConnection.getConnection();
            stmt = conn.prepareStatement(sql);
            stmt.setDate(1, new java.sql.Date(hd.getNgayBatDau().getTime()));
            stmt.setDate(2, new java.sql.Date(hd.getNgayKetThuc().getTime()));
            if (hd.getNoiDung() != null) {
                stmt.setString(3, hd.getNoiDung());
            } else {
                stmt.setNull(3, Types.NVARCHAR);
            }
            if (hd.getIdNV() != null) {
                stmt.setString(4, hd.getIdNV());
            } else {
                stmt.setNull(4, Types.NVARCHAR);
            }
            if (hd.getIdNCC() != null) {
                stmt.setString(5, hd.getIdNCC());
            } else {
                stmt.setNull(5, Types.NVARCHAR);
            }
            stmt.setString(6, hd.getTrangThai());
            stmt.setString(7, hd.getIdHDong());
            int rows = stmt.executeUpdate();
            return rows > 0;
        } catch (SQLException e) {
            e.printStackTrace();
            return false;
        } finally {
            DBCloseHelper.closeAll(stmt, conn);
        }
    }

    // XÓA MỀM: chỉ cập nhật isDeleted = 1
    public boolean deleteHopDong(String idHDong) {
        String sql = "UPDATE HopDong SET isDeleted = 1 WHERE idHDong = ?";
        Connection conn = null;
        PreparedStatement stmt = null;
        try {
            conn = DBConnection.getConnection();
            stmt = conn.prepareStatement(sql);
            stmt.setString(1, idHDong);
            int rows = stmt.executeUpdate();
            return rows > 0;
        } catch (SQLException e) {
            e.printStackTrace();
            return false;
        } finally {
            DBCloseHelper.closeAll(stmt, conn);
        }
    }
}

//This is code of: KhachHangDAO.java
package dao;

import connectDB.DBConnection;
import connectDB.DBCloseHelper;
import entities.KhachHang;

import java.sql.*;
import java.util.ArrayList;
import java.util.List;

/**
 * KhachHangDAO.java
 *
 * CRUD cơ bản cho bảng KhachHang,
 * và bổ sung thêm phương thức search(String hoTen, String sdt).
 */
public class KhachHangDAO {

    /**
     * Lấy toàn bộ danh sách KhachHang.
     */
	public List<KhachHang> getAll() {
        List<KhachHang> list = new ArrayList<>();
        String sql = "SELECT idKH, hoTen, sdt, gioiTinh, ngayThamGia FROM KhachHang WHERE (isDeleted IS NULL OR isDeleted = 0)";
        Connection conn = null;
        Statement stmt = null;
        ResultSet rs = null;
        try {
            conn = DBConnection.getConnection();
            stmt = conn.createStatement();
            rs = stmt.executeQuery(sql);
            while (rs.next()) {
                KhachHang kh = new KhachHang();
                kh.setIdKH(rs.getString("idKH"));
                kh.setHoTen(rs.getString("hoTen"));
                kh.setSdt(rs.getString("sdt"));
                kh.setGioiTinh(rs.getString("gioiTinh"));
                kh.setNgayThamGia(rs.getDate("ngayThamGia"));
                list.add(kh);
            }
        } catch (SQLException e) {
            e.printStackTrace();
        } finally {
            DBCloseHelper.closeAll(rs, stmt, conn);
        }
        return list;
    }

    /**
     * Thêm mới KhachHang.
     */
	public boolean insert(KhachHang kh) {
        String sql = "INSERT INTO KhachHang (idKH, hoTen, sdt, gioiTinh, ngayThamGia, isDeleted) VALUES (?, ?, ?, ?, ?, 0)";
        Connection conn = null;
        PreparedStatement stmt = null;
        try {
            conn = DBConnection.getConnection();
            stmt = conn.prepareStatement(sql);
            stmt.setString(1, kh.getIdKH());
            stmt.setString(2, kh.getHoTen());
            stmt.setString(3, kh.getSdt());
            stmt.setString(4, kh.getGioiTinh());
            stmt.setDate(5, new java.sql.Date(kh.getNgayThamGia().getTime()));
            int rows = stmt.executeUpdate();
            return rows > 0;
        } catch (SQLException e) {
            if (e.getErrorCode() == 2627) {
                throw new RuntimeException("ID khách hàng đã tồn tại!");
            }
            e.printStackTrace();
            throw new RuntimeException("Lỗi SQL khi thêm khách hàng: " + e.getMessage());
        } finally {
            DBCloseHelper.closeAll(stmt, conn);
        }
    }

    /**
     * Cập nhật KhachHang.
     */
	public boolean update(KhachHang kh) {
        String sql = "UPDATE KhachHang SET hoTen = ?, sdt = ?, gioiTinh = ?, ngayThamGia = ? WHERE idKH = ?";
        Connection conn = null;
        PreparedStatement stmt = null;
        try {
            conn = DBConnection.getConnection();
            stmt = conn.prepareStatement(sql);
            stmt.setString(1, kh.getHoTen());
            stmt.setString(2, kh.getSdt());
            stmt.setString(3, kh.getGioiTinh());
            stmt.setDate(4, new java.sql.Date(kh.getNgayThamGia().getTime()));
            stmt.setString(5, kh.getIdKH());
            int rows = stmt.executeUpdate();
            return rows > 0;
        } catch (SQLException e) {
            e.printStackTrace();
            throw new RuntimeException("Lỗi SQL khi cập nhật khách hàng: " + e.getMessage());
        } finally {
            DBCloseHelper.closeAll(stmt, conn);
        }
    }

    /**
     * Xóa KhachHang theo idKH.
     */
	public boolean delete(String idKH) {
        String sql = "UPDATE KhachHang SET isDeleted = 1 WHERE idKH = ?";
        Connection conn = null;
        PreparedStatement stmt = null;
        try {
            conn = DBConnection.getConnection();
            stmt = conn.prepareStatement(sql);
            stmt.setString(1, idKH);
            int rows = stmt.executeUpdate();
            return rows > 0;
        } catch (SQLException e) {
            if (e.getErrorCode() == 547) {
                throw new RuntimeException("Không thể xóa vì khách hàng đã có hóa đơn liên quan!");
            }
            e.printStackTrace();
            throw new RuntimeException("Lỗi SQL khi xóa khách hàng: " + e.getMessage());
        } finally {
            DBCloseHelper.closeAll(stmt, conn);
        }
    }

    /**
     * Tìm kiếm Khách hàng theo hoTen hoặc sdt (hoặc cả hai).
     * Nếu cả hai tham số đều rỗng, trả về toàn bộ danh sách.
     */
	public List<KhachHang> search(String hoTen, String sdt) {
        List<KhachHang> list = new ArrayList<>();
        StringBuilder sql = new StringBuilder(
            "SELECT idKH, hoTen, sdt, gioiTinh, ngayThamGia FROM KhachHang WHERE (isDeleted IS NULL OR isDeleted = 0)"
        );
        if (hoTen != null && !hoTen.trim().isEmpty()) {
            sql.append(" AND hoTen LIKE ?");
        }
        if (sdt != null && !sdt.trim().isEmpty()) {
            sql.append(" AND sdt LIKE ?");
        }

        Connection conn = null;
        PreparedStatement stmt = null;
        ResultSet rs = null;
        try {
            conn = DBConnection.getConnection();
            stmt = conn.prepareStatement(sql.toString());
            int idx = 1;
            if (hoTen != null && !hoTen.trim().isEmpty()) {
                stmt.setString(idx++, "%" + hoTen.trim() + "%");
            }
            if (sdt != null && !sdt.trim().isEmpty()) {
                stmt.setString(idx++, "%" + sdt.trim() + "%");
            }
            rs = stmt.executeQuery();
            while (rs.next()) {
                KhachHang kh = new KhachHang();
                kh.setIdKH(rs.getString("idKH"));
                kh.setHoTen(rs.getString("hoTen"));
                kh.setSdt(rs.getString("sdt"));
                kh.setGioiTinh(rs.getString("gioiTinh"));
                kh.setNgayThamGia(rs.getDate("ngayThamGia"));
                list.add(kh);
            }
        } catch (SQLException e) {
            e.printStackTrace();
        } finally {
            DBCloseHelper.closeAll(rs, stmt, conn);
        }
        return list;
    }


    /**
     * Lấy KhachHang theo SĐT (đã có sẵn):
     */
	public KhachHang getBySDT(String sdt) {
        String sql = "SELECT idKH, hoTen, sdt, gioiTinh, ngayThamGia FROM KhachHang WHERE sdt = ? AND (isDeleted IS NULL OR isDeleted = 0)";
        Connection conn = null;
        PreparedStatement stmt = null;
        ResultSet rs = null;
        try {
            conn = DBConnection.getConnection();
            stmt = conn.prepareStatement(sql);
            stmt.setString(1, sdt);
            rs = stmt.executeQuery();
            if (rs.next()) {
                KhachHang kh = new KhachHang();
                kh.setIdKH(rs.getString("idKH"));
                kh.setHoTen(rs.getString("hoTen"));
                kh.setSdt(rs.getString("sdt"));
                kh.setGioiTinh(rs.getString("gioiTinh"));
                kh.setNgayThamGia(rs.getDate("ngayThamGia"));
                return kh;
            }
        } catch (SQLException e) {
            e.printStackTrace();
        } finally {
            DBCloseHelper.closeAll(rs, stmt, conn);
        }
        return null;
    }
}

//This is code of: NhaCungCapDAO.java
package dao;

import connectDB.DBConnection;
import connectDB.DBCloseHelper;
import entities.NhaCungCap;

import java.sql.*;
import java.util.ArrayList;
import java.util.List;

public class NhaCungCapDAO {

    // Lấy tất cả nhà cung cấp chưa xóa
    public List<NhaCungCap> getAll() {
        List<NhaCungCap> list = new ArrayList<>();
        String sql = "SELECT idNCC, tenNCC, sdt, diaChi FROM NhaCungCap WHERE (isDeleted IS NULL OR isDeleted = 0)";
        Connection conn = null;
        Statement stmt = null;
        ResultSet rs = null;
        try {
            conn = DBConnection.getConnection();
            stmt = conn.createStatement();
            rs = stmt.executeQuery(sql);
            while (rs.next()) {
                NhaCungCap ncc = new NhaCungCap();
                ncc.setIdNCC(rs.getString("idNCC"));
                ncc.setTenNCC(rs.getString("tenNCC"));
                ncc.setSdt(rs.getString("sdt"));
                ncc.setDiaChi(rs.getString("diaChi"));
                list.add(ncc);
            }
        } catch (SQLException e) {
            e.printStackTrace();
        } finally {
            DBCloseHelper.closeAll(rs, stmt, conn);
        }
        return list;
    }

    // Thêm mới NCC (isDeleted = 0)
    public boolean insert(NhaCungCap ncc) {
        String sql = "INSERT INTO NhaCungCap (idNCC, tenNCC, sdt, diaChi, isDeleted) VALUES (?, ?, ?, ?, 0)";
        Connection conn = null;
        PreparedStatement stmt = null;
        try {
            conn = DBConnection.getConnection();
            stmt = conn.prepareStatement(sql);
            stmt.setString(1, ncc.getIdNCC());
            stmt.setString(2, ncc.getTenNCC());
            stmt.setString(3, ncc.getSdt());
            stmt.setString(4, ncc.getDiaChi());
            int rows = stmt.executeUpdate();
            return rows > 0;
        } catch (SQLException e) {
            e.printStackTrace();
            return false;
        } finally {
            DBCloseHelper.closeAll(stmt, conn);
        }
    }

    // Cập nhật thông tin (trừ isDeleted)
    public boolean update(NhaCungCap ncc) {
        String sql = "UPDATE NhaCungCap SET tenNCC = ?, sdt = ?, diaChi = ? WHERE idNCC = ?";
        Connection conn = null;
        PreparedStatement stmt = null;
        try {
            conn = DBConnection.getConnection();
            stmt = conn.prepareStatement(sql);
            stmt.setString(1, ncc.getTenNCC());
            stmt.setString(2, ncc.getSdt());
            stmt.setString(3, ncc.getDiaChi());
            stmt.setString(4, ncc.getIdNCC());
            int rows = stmt.executeUpdate();
            return rows > 0;
        } catch (SQLException e) {
            e.printStackTrace();
            return false;
        } finally {
            DBCloseHelper.closeAll(stmt, conn);
        }
    }

    // XÓA MỀM: cập nhật isDeleted = 1 thay vì DELETE
    public boolean delete(String idNCC) {
        String sql = "UPDATE NhaCungCap SET isDeleted = 1 WHERE idNCC = ?";
        Connection conn = null;
        PreparedStatement stmt = null;
        try {
            conn = DBConnection.getConnection();
            stmt = conn.prepareStatement(sql);
            stmt.setString(1, idNCC);
            int rows = stmt.executeUpdate();
            return rows > 0;
        } catch (SQLException e) {
            e.printStackTrace();
            return false;
        } finally {
            DBCloseHelper.closeAll(stmt, conn);
        }
    }

    // Tìm kiếm NCC theo id hoặc tên (chỉ hiện chưa xóa)
    public List<NhaCungCap> search(String idNCC, String tenNCC) {
        List<NhaCungCap> list = new ArrayList<>();
        StringBuilder sql = new StringBuilder(
            "SELECT idNCC, tenNCC, sdt, diaChi FROM NhaCungCap WHERE (isDeleted IS NULL OR isDeleted = 0)"
        );
        if (idNCC != null && !idNCC.trim().isEmpty()) {
            sql.append(" AND idNCC LIKE ?");
        }
        if (tenNCC != null && !tenNCC.trim().isEmpty()) {
            sql.append(" AND tenNCC LIKE ?");
        }

        Connection conn = null;
        PreparedStatement stmt = null;
        ResultSet rs = null;
        try {
            conn = DBConnection.getConnection();
            stmt = conn.prepareStatement(sql.toString());
            int idx = 1;
            if (idNCC != null && !idNCC.trim().isEmpty()) {
                stmt.setString(idx++, "%" + idNCC.trim() + "%");
            }
            if (tenNCC != null && !tenNCC.trim().isEmpty()) {
                stmt.setString(idx++, "%" + tenNCC.trim() + "%");
            }
            rs = stmt.executeQuery();
            while (rs.next()) {
                NhaCungCap ncc = new NhaCungCap();
                ncc.setIdNCC(rs.getString("idNCC"));
                ncc.setTenNCC(rs.getString("tenNCC"));
                ncc.setSdt(rs.getString("sdt"));
                ncc.setDiaChi(rs.getString("diaChi"));
                list.add(ncc);
            }
        } catch (SQLException e) {
            e.printStackTrace();
        } finally {
            DBCloseHelper.closeAll(rs, stmt, conn);
        }
        return list;
    }
}

//This is code of: NhanVienDAO.java
package dao;

import connectDB.DBConnection;
import connectDB.DBCloseHelper;
import entities.NhanVien;

import java.sql.*;
import java.util.ArrayList;
import java.util.List;

/**
 * NhanVienDAO.java
 *
 * CRUD cho bảng NhanVien, bây giờ đã có thêm hai cột luong và trangThai.
 * Đồng thời vẫn quản lý luôn bảng TaiKhoan như trước (LEFT JOIN để lấy username/password).
 */
public class NhanVienDAO {

    /**
     * Lấy tất cả NhanVien (kèm cột luong, trangThai và LEFT JOIN TaiKhoan để lấy username/password).
     */
	public List<NhanVien> getAll() {
        List<NhanVien> list = new ArrayList<>();
        String sql = "SELECT n.idNV, n.hoTen, n.sdt, n.gioiTinh, n.namSinh, n.ngayVaoLam, "
                   + "n.luong, n.trangThai, n.isDeleted, t.username, t.password "
                   + "FROM NhanVien n LEFT JOIN TaiKhoan t ON n.idNV = t.idNV "
                   + "WHERE (n.isDeleted IS NULL OR n.isDeleted = 0)";
        Connection conn = null;
        Statement stmt = null;
        ResultSet rs = null;
        try {
            conn = DBConnection.getConnection();
            stmt = conn.createStatement();
            rs = stmt.executeQuery(sql);
            while (rs.next()) {
                NhanVien nv = new NhanVien();
                nv.setIdNV(rs.getString("idNV"));
                nv.setHoTen(rs.getString("hoTen"));
                nv.setSdt(rs.getString("sdt"));
                nv.setGioiTinh(rs.getString("gioiTinh"));
                nv.setNamSinh(rs.getInt("namSinh"));
                nv.setNgayVaoLam(rs.getDate("ngayVaoLam"));
                nv.setLuong(rs.getString("luong"));
                nv.setTrangThai(rs.getString("trangThai"));
                nv.setUsername(rs.getString("username"));
                nv.setPassword(rs.getString("password"));
                // Lấy luôn isDeleted nếu cần (không nhất thiết)
                list.add(nv);
            }
        } catch (SQLException e) {
            e.printStackTrace();
        } finally {
            DBCloseHelper.closeAll(rs, stmt, conn);
        }
        return list;
    }


    /**
     * Tìm kiếm NhanVien theo idNV hoặc hoTen (kèm cả luong, trangThai và username/password).
     * Nếu cả hai tham số đều rỗng, trả về toàn bộ.
     */
	public List<NhanVien> search(String idNV, String hoTen) {
        List<NhanVien> list = new ArrayList<>();
        StringBuilder sql = new StringBuilder(
            "SELECT n.idNV, n.hoTen, n.sdt, n.gioiTinh, n.namSinh, n.ngayVaoLam, "
            + "n.luong, n.trangThai, n.isDeleted, t.username, t.password "
            + "FROM NhanVien n LEFT JOIN TaiKhoan t ON n.idNV = t.idNV "
            + "WHERE (n.isDeleted IS NULL OR n.isDeleted = 0)"
        );
        if (idNV != null && !idNV.trim().isEmpty()) {
            sql.append(" AND n.idNV LIKE ?");
        }
        if (hoTen != null && !hoTen.trim().isEmpty()) {
            sql.append(" AND n.hoTen LIKE ?");
        }

        Connection conn = null;
        PreparedStatement stmt = null;
        ResultSet rs = null;
        try {
            conn = DBConnection.getConnection();
            stmt = conn.prepareStatement(sql.toString());
            int idx = 1;
            if (idNV != null && !idNV.trim().isEmpty()) {
                stmt.setString(idx++, "%" + idNV.trim() + "%");
            }
            if (hoTen != null && !hoTen.trim().isEmpty()) {
                stmt.setString(idx++, "%" + hoTen.trim() + "%");
            }
            rs = stmt.executeQuery();
            while (rs.next()) {
                NhanVien nv = new NhanVien();
                nv.setIdNV(rs.getString("idNV"));
                nv.setHoTen(rs.getString("hoTen"));
                nv.setSdt(rs.getString("sdt"));
                nv.setGioiTinh(rs.getString("gioiTinh"));
                nv.setNamSinh(rs.getInt("namSinh"));
                nv.setNgayVaoLam(rs.getDate("ngayVaoLam"));
                nv.setLuong(rs.getString("luong"));
                nv.setTrangThai(rs.getString("trangThai"));
                nv.setUsername(rs.getString("username"));
                nv.setPassword(rs.getString("password"));
                list.add(nv);
            }
        } catch (SQLException e) {
            e.printStackTrace();
        } finally {
            DBCloseHelper.closeAll(rs, stmt, conn);
        }
        return list;
    }
    /**
     * Thêm mới NhanVien (kèm cả hai cột luong và trangThai) và thêm TaiKhoan nếu có username.
     */
    public boolean insert(NhanVien nv) {
        Connection conn = null;
        PreparedStatement stmtNV = null;
        PreparedStatement stmtTK = null;
        String sqlNV = "INSERT INTO NhanVien " +
                       "(idNV, hoTen, sdt, gioiTinh, namSinh, ngayVaoLam, luong, trangThai) " +
                       "VALUES (?, ?, ?, ?, ?, ?, ?, ?)";
        String sqlTK = "INSERT INTO TaiKhoan (idTK, username, password, idNV, idVT) " +
                       "VALUES (?, ?, ?, ?, ?)";

        try {
            conn = DBConnection.getConnection();
            conn.setAutoCommit(false);

            stmtNV = conn.prepareStatement(sqlNV);
            stmtNV.setString(1, nv.getIdNV());
            stmtNV.setString(2, nv.getHoTen());
            stmtNV.setString(3, nv.getSdt());
            stmtNV.setString(4, nv.getGioiTinh());
            stmtNV.setInt(5, nv.getNamSinh());
            stmtNV.setDate(6, new java.sql.Date(nv.getNgayVaoLam().getTime()));
            stmtNV.setString(7, nv.getLuong());
            stmtNV.setString(8, nv.getTrangThai());
            int rowsNV = stmtNV.executeUpdate();

            int rowsTK = 1;
            if (nv.getUsername() != null && !nv.getUsername().trim().isEmpty()) {
                stmtTK = conn.prepareStatement(sqlTK);
                String idTK = "TK" + nv.getIdNV();
                stmtTK.setString(1, idTK);
                stmtTK.setString(2, nv.getUsername());
                stmtTK.setString(3, nv.getPassword());
                stmtTK.setString(4, nv.getIdNV());
                stmtTK.setString(5, nv.getRoleId() != null ? nv.getRoleId() : "VT02");
                rowsTK = stmtTK.executeUpdate();
            }

            conn.commit();
            return rowsNV > 0 && rowsTK > 0;
        } catch (SQLException e) {
            e.printStackTrace();
            if (conn != null) try { conn.rollback(); } catch (SQLException ex) { ex.printStackTrace(); }
            return false;
        } finally {
            DBCloseHelper.closeAll(stmtTK, null);
            DBCloseHelper.closeAll(null, stmtNV, conn);
        }
    }

    /**
     * Cập nhật NhanVien (kèm luong, trangThai) và TaiKhoan nếu có thay đổi.
     */
    public boolean update(NhanVien nv) {
        Connection conn = null;
        PreparedStatement stmtNV = null;
        PreparedStatement stmtTKcheck = null;
        PreparedStatement stmtTKup = null;
        PreparedStatement stmtTKin = null;

        String sqlNV = "UPDATE NhanVien SET " +
                       "hoTen = ?, sdt = ?, gioiTinh = ?, namSinh = ?, ngayVaoLam = ?, " +
                       "luong = ?, trangThai = ? " +
                       "WHERE idNV = ?";
        String sqlTKcheck = "SELECT idTK FROM TaiKhoan WHERE idNV = ?";
        String sqlTKup = "UPDATE TaiKhoan SET username = ?, password = ?, idVT = ? WHERE idNV = ?";
        String sqlTKin = "INSERT INTO TaiKhoan (idTK, username, password, idNV, idVT) VALUES (?, ?, ?, ?, ?)";

        try {
            conn = DBConnection.getConnection();
            conn.setAutoCommit(false);

            // 1) Cập nhật NhanVien
            stmtNV = conn.prepareStatement(sqlNV);
            stmtNV.setString(1, nv.getHoTen());
            stmtNV.setString(2, nv.getSdt());
            stmtNV.setString(3, nv.getGioiTinh());
            stmtNV.setInt(4, nv.getNamSinh());
            stmtNV.setDate(5, new java.sql.Date(nv.getNgayVaoLam().getTime()));
            stmtNV.setString(6, nv.getLuong());
            stmtNV.setString(7, nv.getTrangThai());
            stmtNV.setString(8, nv.getIdNV());
            int rowsNV = stmtNV.executeUpdate();

            // 2) Kiểm tra TaiKhoan
            stmtTKcheck = conn.prepareStatement(sqlTKcheck);
            stmtTKcheck.setString(1, nv.getIdNV());
            ResultSet rs = stmtTKcheck.executeQuery();
            boolean existsTK = rs.next();
            rs.close();

            int rowsTK = 0;
            if (nv.getUsername() != null && !nv.getUsername().trim().isEmpty()) {
                if (existsTK) {
                    stmtTKup = conn.prepareStatement(sqlTKup);
                    stmtTKup.setString(1, nv.getUsername());
                    stmtTKup.setString(2, nv.getPassword());
                    stmtTKup.setString(3, nv.getRoleId() != null ? nv.getRoleId() : "VT02");
                    stmtTKup.setString(4, nv.getIdNV());
                    rowsTK = stmtTKup.executeUpdate();
                } else {
                    stmtTKin = conn.prepareStatement(sqlTKin);
                    String idTK = "TK" + nv.getIdNV();
                    stmtTKin.setString(1, idTK);
                    stmtTKin.setString(2, nv.getUsername());
                    stmtTKin.setString(3, nv.getPassword());
                    stmtTKin.setString(4, nv.getIdNV());
                    stmtTKin.setString(5, nv.getRoleId() != null ? nv.getRoleId() : "VT02");
                    rowsTK = stmtTKin.executeUpdate();
                }
            } else {
                // Nếu xóa username (để trống), xóa luôn TaiKhoan nếu có
                if (existsTK) {
                    stmtTKup = conn.prepareStatement("DELETE FROM TaiKhoan WHERE idNV = ?");
                    stmtTKup.setString(1, nv.getIdNV());
                    rowsTK = stmtTKup.executeUpdate();
                } else {
                    rowsTK = 1; // không có tài khoản, coi như thành công
                }
            }

            conn.commit();
            return rowsNV > 0 && rowsTK >= 0;
        } catch (SQLException e) {
            e.printStackTrace();
            if (conn != null) try { conn.rollback(); } catch (SQLException ex) { ex.printStackTrace(); }
            return false;
        } finally {
            DBCloseHelper.closeAll(null, stmtTKin, null);
            DBCloseHelper.closeAll(null, stmtTKup, null);
            DBCloseHelper.closeAll(null, stmtTKcheck, null);
            DBCloseHelper.closeAll(null, stmtNV, conn);
        }
    }

    /**
     * Xóa NhanVien (và luôn xóa TaiKhoan nếu có).
     */
    public boolean delete(String idNV) {
        String sql = "UPDATE NhanVien SET isDeleted = 1 WHERE idNV = ?";
        Connection conn = null;
        PreparedStatement stmt = null;
        try {
            conn = DBConnection.getConnection();
            stmt = conn.prepareStatement(sql);
            stmt.setString(1, idNV);
            int rows = stmt.executeUpdate();
            return rows > 0;
        } catch (SQLException e) {
            e.printStackTrace();
            return false;
        } finally {
            DBCloseHelper.closeAll(stmt, conn);
        }
    }
}

//This is code of: PhanHoiDAO.java
package dao;

import connectDB.DBConnection;
import connectDB.DBCloseHelper;
import entities.PhanHoi;

import java.sql.*;
import java.util.ArrayList;
import java.util.List;

public class PhanHoiDAO {

    // Lấy tất cả phản hồi chưa bị xóa mềm
    public List<PhanHoi> getAll() {
        List<PhanHoi> list = new ArrayList<>();
        String sql = "SELECT idPH, idKH, idHD, idThuoc, noiDung, thoiGian, danhGia FROM PhanHoi WHERE (isDeleted IS NULL OR isDeleted = 0)";
        Connection conn = null;
        Statement stmt = null;
        ResultSet rs = null;
        try {
            conn = DBConnection.getConnection();
            stmt = conn.createStatement();
            rs = stmt.executeQuery(sql);
            while (rs.next()) {
                PhanHoi ph = new PhanHoi();
                ph.setIdPH(rs.getString("idPH"));
                ph.setIdKH(rs.getString("idKH"));
                ph.setIdHD(rs.getString("idHD"));
                ph.setIdThuoc(rs.getString("idThuoc"));
                ph.setNoiDung(rs.getString("noiDung"));
                ph.setThoiGian(rs.getTimestamp("thoiGian"));
                ph.setDanhGia(rs.getInt("danhGia"));
                list.add(ph);
            }
        } catch (SQLException e) {
            e.printStackTrace();
        } finally {
            DBCloseHelper.closeAll(rs, stmt, conn);
        }
        return list;
    }

    // Thêm phản hồi mới (set mặc định isDeleted = 0)
    public boolean insert(PhanHoi ph) {
        String sql = "INSERT INTO PhanHoi (idPH, idKH, idHD, idThuoc, noiDung, thoiGian, danhGia, isDeleted) VALUES (?, ?, ?, ?, ?, ?, ?, 0)";
        Connection conn = null;
        PreparedStatement stmt = null;
        try {
            conn = DBConnection.getConnection();
            stmt = conn.prepareStatement(sql);
            stmt.setString(1, ph.getIdPH());
            stmt.setString(2, ph.getIdKH());
            stmt.setString(3, ph.getIdHD());
            stmt.setString(4, ph.getIdThuoc());
            stmt.setString(5, ph.getNoiDung());
            stmt.setTimestamp(6, new java.sql.Timestamp(ph.getThoiGian().getTime()));
            stmt.setInt(7, ph.getDanhGia());
            int rows = stmt.executeUpdate();
            return rows > 0;
        } catch (SQLException e) {
            e.printStackTrace();
            return false;
        } finally {
            DBCloseHelper.closeAll(stmt, conn);
        }
    }

    // Cập nhật phản hồi (không cho sửa isDeleted)
    public boolean update(PhanHoi ph) {
        String sql = "UPDATE PhanHoi SET idKH = ?, idHD = ?, idThuoc = ?, noiDung = ?, thoiGian = ?, danhGia = ? WHERE idPH = ?";
        Connection conn = null;
        PreparedStatement stmt = null;
        try {
            conn = DBConnection.getConnection();
            stmt = conn.prepareStatement(sql);
            stmt.setString(1, ph.getIdKH());
            stmt.setString(2, ph.getIdHD());
            stmt.setString(3, ph.getIdThuoc());
            stmt.setString(4, ph.getNoiDung());
            stmt.setTimestamp(5, new java.sql.Timestamp(ph.getThoiGian().getTime()));
            stmt.setInt(6, ph.getDanhGia());
            stmt.setString(7, ph.getIdPH());
            int rows = stmt.executeUpdate();
            return rows > 0;
        } catch (SQLException e) {
            e.printStackTrace();
            return false;
        } finally {
            DBCloseHelper.closeAll(stmt, conn);
        }
    }

    // XÓA MỀM: cập nhật isDeleted = 1 thay vì xóa thật
    public boolean delete(String idPH) {
        String sql = "UPDATE PhanHoi SET isDeleted = 1 WHERE idPH = ?";
        Connection conn = null;
        PreparedStatement stmt = null;
        try {
            conn = DBConnection.getConnection();
            stmt = conn.prepareStatement(sql);
            stmt.setString(1, idPH);
            int rows = stmt.executeUpdate();
            return rows > 0;
        } catch (SQLException e) {
            e.printStackTrace();
            return false;
        } finally {
            DBCloseHelper.closeAll(stmt, conn);
        }
    }

    // Tìm kiếm phản hồi (lọc chưa xóa)
    public List<PhanHoi> search(String idPH, String idKH) {
        List<PhanHoi> list = new ArrayList<>();
        StringBuilder sql = new StringBuilder(
            "SELECT idPH, idKH, idHD, idThuoc, noiDung, thoiGian, danhGia FROM PhanHoi WHERE (isDeleted IS NULL OR isDeleted = 0)"
        );
        if (idPH != null && !idPH.trim().isEmpty()) {
            sql.append(" AND idPH LIKE ?");
        }
        if (idKH != null && !idKH.trim().isEmpty()) {
            sql.append(" AND idKH LIKE ?");
        }
        Connection conn = null;
        PreparedStatement stmt = null;
        ResultSet rs = null;
        try {
            conn = DBConnection.getConnection();
            stmt = conn.prepareStatement(sql.toString());
            int idx = 1;
            if (idPH != null && !idPH.trim().isEmpty()) {
                stmt.setString(idx++, "%" + idPH.trim() + "%");
            }
            if (idKH != null && !idKH.trim().isEmpty()) {
                stmt.setString(idx++, "%" + idKH.trim() + "%");
            }
            rs = stmt.executeQuery();
            while (rs.next()) {
                PhanHoi ph = new PhanHoi();
                ph.setIdPH(rs.getString("idPH"));
                ph.setIdKH(rs.getString("idKH"));
                ph.setIdHD(rs.getString("idHD"));
                ph.setIdThuoc(rs.getString("idThuoc"));
                ph.setNoiDung(rs.getString("noiDung"));
                ph.setThoiGian(rs.getTimestamp("thoiGian"));
                ph.setDanhGia(rs.getInt("danhGia"));
                list.add(ph);
            }
        } catch (SQLException e) {
            e.printStackTrace();
        } finally {
            DBCloseHelper.closeAll(rs, stmt, conn);
        }
        return list;
    }
}

//This is code of: PhieuNhapDAO.java
package dao;

import connectDB.DBConnection;
import connectDB.DBCloseHelper;
import entities.PhieuNhap;

import java.sql.*;
import java.util.ArrayList;
import java.util.List;

/**
 * PhieuNhapDAO.java
 *
 * CRUD cơ bản cho bảng PhieuNhap,
 * và bổ sung thêm phương thức search(String idPN, String idNV, String idNCC).
 */
public class PhieuNhapDAO {

    /**
     * Lấy toàn bộ danh sách PhieuNhap.
     */
    public List<PhieuNhap> getAll() {
        List<PhieuNhap> list = new ArrayList<>();
        String sql = "SELECT idPN, thoiGian, idNV, idNCC, tongTien FROM PhieuNhap";
        Connection conn = null;
        Statement stmt = null;
        ResultSet rs = null;
        try {
            conn = DBConnection.getConnection();
            stmt = conn.createStatement();
            rs = stmt.executeQuery(sql);
            while (rs.next()) {
                PhieuNhap pn = new PhieuNhap();
                pn.setIdPN(rs.getString("idPN"));
                pn.setThoiGian(rs.getTimestamp("thoiGian"));
                pn.setIdNV(rs.getString("idNV"));
                pn.setIdNCC(rs.getString("idNCC"));
                pn.setTongTien(rs.getDouble("tongTien"));
                list.add(pn);
            }
        } catch (SQLException e) {
            e.printStackTrace();
        } finally {
            DBCloseHelper.closeAll(rs, stmt, conn);
        }
        return list;
    }

    /**
     * Thêm mới PhieuNhap.
     */
    public boolean insert(PhieuNhap pn) {
        String sql = "INSERT INTO PhieuNhap (idPN, thoiGian, idNV, idNCC, tongTien) VALUES (?, ?, ?, ?, ?)";
        Connection conn = null;
        PreparedStatement stmt = null;
        try {
            conn = DBConnection.getConnection();
            stmt = conn.prepareStatement(sql);
            stmt.setString(1, pn.getIdPN());
            stmt.setTimestamp(2, new Timestamp(pn.getThoiGian().getTime()));
            stmt.setString(3, pn.getIdNV());
            stmt.setString(4, pn.getIdNCC());
            stmt.setDouble(5, pn.getTongTien());
            int rows = stmt.executeUpdate();
            return rows > 0;
        } catch (SQLException e) {
            e.printStackTrace();
            return false;
        } finally {
            DBCloseHelper.closeAll(stmt, conn);
        }
    }

    /**
     * Cập nhật PhieuNhap.
     */
    public boolean update(PhieuNhap pn) {
        String sql = "UPDATE PhieuNhap SET thoiGian = ?, idNV = ?, idNCC = ?, tongTien = ? WHERE idPN = ?";
        Connection conn = null;
        PreparedStatement stmt = null;
        try {
            conn = DBConnection.getConnection();
            stmt = conn.prepareStatement(sql);
            stmt.setTimestamp(1, new Timestamp(pn.getThoiGian().getTime()));
            stmt.setString(2, pn.getIdNV());
            stmt.setString(3, pn.getIdNCC());
            stmt.setDouble(4, pn.getTongTien());
            stmt.setString(5, pn.getIdPN());
            int rows = stmt.executeUpdate();
            return rows > 0;
        } catch (SQLException e) {
            e.printStackTrace();
            return false;
        } finally {
            DBCloseHelper.closeAll(stmt, conn);
        }
    }

    /**
     * Xóa PhieuNhap theo idPN.
     */
    public boolean delete(String idPN) {
        String sql = "DELETE FROM PhieuNhap WHERE idPN = ?";
        Connection conn = null;
        PreparedStatement stmt = null;
        try {
            conn = DBConnection.getConnection();
            stmt = conn.prepareStatement(sql);
            stmt.setString(1, idPN);
            int rows = stmt.executeUpdate();
            return rows > 0;
        } catch (SQLException e) {
            e.printStackTrace();
            return false;
        } finally {
            DBCloseHelper.closeAll(stmt, conn);
        }
    }

    /**
     * Tìm kiếm PhieuNhap theo idPN hoặc idNV hoặc idNCC.
     * Nếu cả ba tham số đều rỗng, trả về toàn bộ danh sách.
     */
    public List<PhieuNhap> search(String idPN, String idNV, String idNCC) {
        List<PhieuNhap> list = new ArrayList<>();
        StringBuilder sql = new StringBuilder(
            "SELECT idPN, thoiGian, idNV, idNCC, tongTien FROM PhieuNhap WHERE 1=1"
        );

        if (idPN != null && !idPN.trim().isEmpty()) {
            sql.append(" AND idPN LIKE ?");
        }
        if (idNV != null && !idNV.trim().isEmpty()) {
            sql.append(" AND idNV LIKE ?");
        }
        if (idNCC != null && !idNCC.trim().isEmpty()) {
            sql.append(" AND idNCC LIKE ?");
        }

        Connection conn = null;
        PreparedStatement stmt = null;
        ResultSet rs = null;
        try {
            conn = DBConnection.getConnection();
            stmt = conn.prepareStatement(sql.toString());
            int idx = 1;
            if (idPN != null && !idPN.trim().isEmpty()) {
                stmt.setString(idx++, "%" + idPN.trim() + "%");
            }
            if (idNV != null && !idNV.trim().isEmpty()) {
                stmt.setString(idx++, "%" + idNV.trim() + "%");
            }
            if (idNCC != null && !idNCC.trim().isEmpty()) {
                stmt.setString(idx++, "%" + idNCC.trim() + "%");
            }
            rs = stmt.executeQuery();
            while (rs.next()) {
                PhieuNhap pn = new PhieuNhap();
                pn.setIdPN(rs.getString("idPN"));
                pn.setThoiGian(rs.getTimestamp("thoiGian"));
                pn.setIdNV(rs.getString("idNV"));
                pn.setIdNCC(rs.getString("idNCC"));
                pn.setTongTien(rs.getDouble("tongTien"));
                list.add(pn);
            }
        } catch (SQLException e) {
            e.printStackTrace();
        } finally {
            DBCloseHelper.closeAll(rs, stmt, conn);
        }
        return list;
    }
}

//This is code of: TaiKhoanDAO.java
package dao;

import connectDB.DBConnection;
import connectDB.DBCloseHelper;
import entities.TaiKhoan;

import java.sql.*;

/**
 * TaiKhoanDAO.java
 * Chứa các phương thức truy vấn bảng TaiKhoan, bao gồm checkLogin và getByUsername.
 */
public class TaiKhoanDAO {

    /**
     * Kiểm tra username/password (cách cũ, chỉ trả về true/false).
     */
    public boolean checkLogin(String username, String password) {
        String sql = "SELECT COUNT(*) FROM TaiKhoan WHERE username = ? AND password = ?";
        Connection conn = null;
        PreparedStatement stmt = null;
        ResultSet rs = null;
        try {
            conn = DBConnection.getConnection();
            stmt = conn.prepareStatement(sql);
            stmt.setString(1, username);
            stmt.setString(2, password);
            rs = stmt.executeQuery();
            if (rs.next()) {
                return rs.getInt(1) > 0;
            }
        } catch (SQLException e) {
            e.printStackTrace();
        } finally {
            DBCloseHelper.closeAll(rs, stmt, conn);
        }
        return false;
    }

    /**
     * Lấy thông tin đầy đủ của một tài khoản (bao gồm idVT) theo username.
     * Trả về TaiKhoan nếu tìm thấy, ngược lại trả về null.
     */
    public TaiKhoan getByUsername(String username) {
        String sql = "SELECT idTK, username, password, idNV, idVT FROM TaiKhoan WHERE username = ?";
        Connection conn = null;
        PreparedStatement stmt = null;
        ResultSet rs = null;
        try {
            conn = DBConnection.getConnection();
            stmt = conn.prepareStatement(sql);
            stmt.setString(1, username);
            rs = stmt.executeQuery();
            if (rs.next()) {
                TaiKhoan tk = new TaiKhoan();
                tk.setIdTK(rs.getString("idTK"));
                tk.setUsername(rs.getString("username"));
                tk.setPassword(rs.getString("password"));
                tk.setIdNV(rs.getString("idNV"));
                tk.setIdVT(rs.getString("idVT"));
                return tk;
            }
        } catch (SQLException e) {
            e.printStackTrace();
        } finally {
            DBCloseHelper.closeAll(rs, stmt, conn);
        }
        return null;
    }

    /**
     * Chèn mới tài khoản (nếu cần dùng từ Java).
     */
    public boolean insert(TaiKhoan tk) {
        String sql = "INSERT INTO TaiKhoan (idTK, username, password, idNV, idVT) VALUES (?, ?, ?, ?, ?)";
        Connection conn = null;
        PreparedStatement stmt = null;
        try {
            conn = DBConnection.getConnection();
            stmt = conn.prepareStatement(sql);
            stmt.setString(1, tk.getIdTK());
            stmt.setString(2, tk.getUsername());
            stmt.setString(3, tk.getPassword());
            stmt.setString(4, tk.getIdNV());
            stmt.setString(5, tk.getIdVT());
            int rows = stmt.executeUpdate();
            return rows > 0;
        } catch (SQLException e) {
            e.printStackTrace();
            return false;
        } finally {
            DBCloseHelper.closeAll(stmt, conn);
        }
    }

    // Bạn có thể thêm các phương thức update, delete nếu cần
}

//This is code of: ThuocDAO.java
package dao;

import connectDB.DBConnection;
import connectDB.DBCloseHelper;
import entities.Thuoc;

import java.sql.*;
import java.util.ArrayList;
import java.util.List;

public class ThuocDAO {

    // Lấy toàn bộ danh sách thuốc còn hiệu lực (chưa bị xóa mềm)
    public List<Thuoc> getAllThuoc() {
        List<Thuoc> list = new ArrayList<>();
        String sql = "SELECT idThuoc, tenThuoc, hinhAnh, thanhPhan, donViTinh, danhMuc, xuatXu, " +
                     "soLuongTon, giaNhap, donGia, hanSuDung " +
                     "FROM Thuoc WHERE isDeleted = 0";
        try (Connection conn = DBConnection.getConnection();
             Statement stmt = conn.createStatement();
             ResultSet rs = stmt.executeQuery(sql)) {
            while (rs.next()) {
                Thuoc t = new Thuoc();
                t.setIdThuoc(rs.getString("idThuoc"));
                t.setTenThuoc(rs.getString("tenThuoc"));
                t.setHinhAnh(rs.getBytes("hinhAnh"));
                t.setThanhPhan(rs.getString("thanhPhan"));
                t.setDonViTinh(rs.getString("donViTinh"));
                t.setDanhMuc(rs.getString("danhMuc"));
                t.setXuatXu(rs.getString("xuatXu"));
                t.setSoLuongTon(rs.getInt("soLuongTon"));
                t.setGiaNhap(rs.getDouble("giaNhap"));
                t.setDonGia(rs.getDouble("donGia"));
                t.setHanSuDung(rs.getDate("hanSuDung"));
                list.add(t);
            }
        } catch (SQLException e) {
            e.printStackTrace();
        }
        return list;
    }

    // Tìm kiếm thuốc theo ID hoặc tên (lọc ra thuốc chưa bị xóa)
    public List<Thuoc> searchThuoc(String idThuoc, String tenThuoc) {
        List<Thuoc> list = new ArrayList<>();
        StringBuilder sql = new StringBuilder(
            "SELECT idThuoc, tenThuoc, hinhAnh, thanhPhan, donViTinh, danhMuc, xuatXu, " +
            "soLuongTon, giaNhap, donGia, hanSuDung " +
            "FROM Thuoc WHERE isDeleted = 0"
        );
        if (idThuoc != null && !idThuoc.trim().isEmpty()) {
            sql.append(" AND idThuoc LIKE ?");
        }
        if (tenThuoc != null && !tenThuoc.trim().isEmpty()) {
            sql.append(" AND tenThuoc LIKE ?");
        }

        try (Connection conn = DBConnection.getConnection();
             PreparedStatement stmt = conn.prepareStatement(sql.toString())) {
            int idx = 1;
            if (idThuoc != null && !idThuoc.trim().isEmpty()) {
                stmt.setString(idx++, "%" + idThuoc.trim() + "%");
            }
            if (tenThuoc != null && !tenThuoc.trim().isEmpty()) {
                stmt.setString(idx++, "%" + tenThuoc.trim() + "%");
            }

            try (ResultSet rs = stmt.executeQuery()) {
                while (rs.next()) {
                    Thuoc t = new Thuoc();
                    t.setIdThuoc(rs.getString("idThuoc"));
                    t.setTenThuoc(rs.getString("tenThuoc"));
                    t.setHinhAnh(rs.getBytes("hinhAnh"));
                    t.setThanhPhan(rs.getString("thanhPhan"));
                    t.setDonViTinh(rs.getString("donViTinh"));
                    t.setDanhMuc(rs.getString("danhMuc"));
                    t.setXuatXu(rs.getString("xuatXu"));
                    t.setSoLuongTon(rs.getInt("soLuongTon"));
                    t.setGiaNhap(rs.getDouble("giaNhap"));
                    t.setDonGia(rs.getDouble("donGia"));
                    t.setHanSuDung(rs.getDate("hanSuDung"));
                    list.add(t);
                }
            }
        } catch (SQLException e) {
            e.printStackTrace();
        }
        return list;
    }

    // Thêm thuốc mới
    public boolean insertThuoc(Thuoc t) {
        String sql = "INSERT INTO Thuoc " +
                     "(idThuoc, tenThuoc, hinhAnh, thanhPhan, donViTinh, danhMuc, xuatXu, " +
                     "soLuongTon, giaNhap, donGia, hanSuDung, isDeleted) " +
                     "VALUES (?, ?, ?, ?, ?, ?, ?, ?, ?, ?, ?, 0)";
        try (Connection conn = DBConnection.getConnection();
             PreparedStatement stmt = conn.prepareStatement(sql)) {

            stmt.setString(1, t.getIdThuoc());
            stmt.setString(2, t.getTenThuoc());
            if (t.getHinhAnh() != null) {
                stmt.setBytes(3, t.getHinhAnh());
            } else {
                stmt.setNull(3, Types.VARBINARY);
            }
            if (t.getThanhPhan() != null) {
                stmt.setString(4, t.getThanhPhan());
            } else {
                stmt.setNull(4, Types.NVARCHAR);
            }
            stmt.setString(5, t.getDonViTinh());
            stmt.setString(6, t.getDanhMuc());
            stmt.setString(7, t.getXuatXu());
            stmt.setInt(8, t.getSoLuongTon());
            stmt.setDouble(9, t.getGiaNhap());
            stmt.setDouble(10, t.getDonGia());
            stmt.setDate(11, new java.sql.Date(t.getHanSuDung().getTime()));

            return stmt.executeUpdate() > 0;
        } catch (SQLException e) {
            e.printStackTrace();
            return false;
        }
    }

    // Cập nhật thuốc
    public boolean updateThuoc(Thuoc t) {
        String sql = "UPDATE Thuoc SET " +
                     "tenThuoc = ?, hinhAnh = ?, thanhPhan = ?, donViTinh = ?, danhMuc = ?, xuatXu = ?, " +
                     "soLuongTon = ?, giaNhap = ?, donGia = ?, hanSuDung = ? " +
                     "WHERE idThuoc = ?";
        try (Connection conn = DBConnection.getConnection();
             PreparedStatement stmt = conn.prepareStatement(sql)) {

            stmt.setString(1, t.getTenThuoc());
            if (t.getHinhAnh() != null) {
                stmt.setBytes(2, t.getHinhAnh());
            } else {
                stmt.setNull(2, Types.VARBINARY);
            }
            if (t.getThanhPhan() != null) {
                stmt.setString(3, t.getThanhPhan());
            } else {
                stmt.setNull(3, Types.NVARCHAR);
            }
            stmt.setString(4, t.getDonViTinh());
            stmt.setString(5, t.getDanhMuc());
            stmt.setString(6, t.getXuatXu());
            stmt.setInt(7, t.getSoLuongTon());
            stmt.setDouble(8, t.getGiaNhap());
            stmt.setDouble(9, t.getDonGia());
            stmt.setDate(10, new java.sql.Date(t.getHanSuDung().getTime()));
            stmt.setString(11, t.getIdThuoc());

            return stmt.executeUpdate() > 0;
        } catch (SQLException e) {
            e.printStackTrace();
            return false;
        }
    }

    // Xóa mềm thuốc (isDeleted = 1)
    public boolean deleteThuoc(String idThuoc) {
        String sql = "UPDATE Thuoc SET isDeleted = 1 WHERE idThuoc = ?";
        try (Connection conn = DBConnection.getConnection();
             PreparedStatement stmt = conn.prepareStatement(sql)) {
            stmt.setString(1, idThuoc);
            return stmt.executeUpdate() > 0;
        } catch (SQLException e) {
            e.printStackTrace();
            throw new RuntimeException("Lỗi khi xóa mềm thuốc: " + e.getMessage());
        }
    }

    // Phục hồi thuốc đã bị xóa mềm (isDeleted = 0)
    public boolean restoreThuoc(String idThuoc) {
        String sql = "UPDATE Thuoc SET isDeleted = 0 WHERE idThuoc = ?";
        try (Connection conn = DBConnection.getConnection();
             PreparedStatement stmt = conn.prepareStatement(sql)) {
            stmt.setString(1, idThuoc);
            return stmt.executeUpdate() > 0;
        } catch (SQLException e) {
            e.printStackTrace();
            return false;
        }
    }
}
